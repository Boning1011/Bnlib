{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "attributecreate", "icon": "SOP/attribcreate", "tags": "attribute, file", "since": "17.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Attribute Create"], "extent": [0, 21]}, {"type": "summary", "indent": 0, "text": ["Creates or sets an attribute on all incoming work items."], "extent": [136, 200]}, {"type": "para", "indent": 0, "text": ["This node lets you change internal attributes (", {"type": "code", "text": ["pdg_index"]}, ", ", {"type": "code", "text": ["pdg_frame"]}, ", ", {"type": "code", "text": ["pdg_priority"]}, ", ", {"type": "code", "text": ["pdg_output"]}, ") as well as create/set custom attributes. If an attribute with the given name and type already exists, this will overwrite its size/value."], "extent": [200, 443]}, {"level": 1, "id": "top_attributes", "container": true, "type": "top_attributes_section", "indent": 0, "role": "section", "extent": [443, 459], "body": [{"type": "para", "indent": 0, "text": ["When the ", {"type": "ui", "text": ["Check Files When"]}, " parameter is set to ", {"type": "ui", "text": ["Work Item is Cooked"]}, ", this node adds extra attributes in addition to the attributes created using the multiparms. Each work item also stores a list of files that need to be validated, and whether they should produce errors or warnings."], "extent": [459, 750]}, {"type": "top_attributes_item_group", "body": [{"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["validateerrors"]}], "role": "item", "extent": [750, 770], "body": [{"type": "para", "indent": 4, "text": ["A list of flags that determine whether the files being validated should produce a warning or error when validation fails. This is the same size as the ", {"type": "code", "text": ["validatefiles"]}, " attribute."], "extent": [786, 969]}], "container": true, "attrs": {"type": "int"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["validatefiles"]}], "role": "item", "extent": [969, 988], "body": [{"type": "para", "indent": 4, "text": ["A list of file paths that need to be validated when the work item cooks."], "extent": [1007, 1086]}], "container": true, "attrs": {"type": "string"}}], "container": true, "role": "item_group"}], "text": "Top_attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1086, 1098], "body": [{"level": 4, "type": "sep", "indent": 0, "text": [" Create "], "extent": [1098, 1116], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Create When"], "extent": [1172, 1189], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is on, you can set it to an expression that\u2019s evaluated for each work item. Attributes will only be created/updated on a work item if this parameter\u2019s expression returns to a non-zero value for that item. For example, to only set attributes on work items whose ", {"type": "code", "text": ["index"]}, " is greater than 5, enable this parameter and set its expression to ", {"type": "code", "text": ["@pdg_index > 5"]}, "."], "extent": [1213, 1596]}], "container": true, "attrs": {"id": "condition"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Work Item "], "extent": [1596, 1616], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Copy Inputs to Outputs"], "extent": [1616, 1645], "body": [{"type": "para", "indent": 8, "text": ["Determines whether or not work items in this node should copy input files to their output file list."], "extent": [1671, 1781]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Never"], "extent": [1781, 1796], "body": [{"type": "para", "indent": 12, "text": ["Never copy inputs files the output file list."], "extent": [1796, 1855]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Always"], "extent": [1855, 1871], "body": [{"type": "para", "indent": 12, "text": ["Always copy inputs files the output file list."], "extent": [1871, 1931]}], "container": true}, {"type": "dt", "indent": 8, "text": ["If Node Doesn\u2019t Add Outputs"], "extent": [1931, 1968], "body": [{"type": "para", "indent": 12, "text": ["Input files are only copied if the Attribute Create does ", {"type": "em", "text": ["not"]}, " add any new output files to the work item on its own. If this node has output files specified using the ", {"type": "ui", "text": ["Files"]}, " multiparm, then only those files will appear in the output file list."], "extent": [1968, 2228]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "copyoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Priority"], "extent": [7682, 7702], "body": [{"type": "para", "indent": 4, "text": ["This parameter determines how the current scheduler prioritizes the work items in this node."], "extent": [7733, 7831]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [7831, 7864], "body": [{"type": "para", "indent": 11, "text": ["The work items inherit their priority from their parent items. If a work item has no parent, its priority is set to 0."], "extent": [7864, 7995]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [7995, 8019], "body": [{"type": "para", "indent": 11, "text": ["The work item priority is set to the value of ", {"type": "ui", "text": ["Priority Expression"]}, "."], "extent": [8019, 8102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Priority"], "extent": [8102, 8130], "body": [{"type": "para", "indent": 7, "text": ["The work item priority is set based on the node\u2019s own internal priority calculations."], "extent": [8130, 8235]}, {"type": "para", "indent": 7, "text": ["This option is only available on the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor TOP"], "fullpath": "/nodes/top/pythonprocessor.html"}, ", ", {"scheme": "Icon", "value": "TOP/ropfetch.svg", "type": "link", "text": "", "fullpath": "/nodes/top/TOP/ropfetch.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": ["ROP Fetch TOP"], "fullpath": "/nodes/top/ropfetch.html"}, ", and ROP Output TOP nodes. These nodes define their own prioritization schemes that are implemented in their node logic."], "extent": [8235, 8531]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitempriority"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Priority Expression"], "extent": [8531, 8552], "body": [{"type": "para", "indent": 4, "text": ["This parameter specifies an expression for work item priority. The expression is evaluated for each work item in the node."], "extent": [8587, 8715]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Work Item Priority"]}, " is set to ", {"type": "ui", "text": ["Custom Expression"]}, "."], "extent": [8715, 8814]}], "container": true, "attrs": {"id": "pdg_workitempriorityexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Index"], "extent": [2338, 2349], "body": [{"type": "para", "indent": 8, "text": ["When on, the node sets each work item\u2019s internal ", {"type": "code", "text": ["index"]}, " attribute to the result of the given expression. "], "extent": [2374, 2490]}, {"type": "para", "indent": 8, "text": ["For example, to set each work item\u2019s index to be the value of its ", {"type": "code", "text": ["foo"]}, " attribute minus one, turn on ", {"type": "ui", "text": ["Index"]}, " and set the expression to ", {"type": "code", "text": ["@foo - 1"]}, "."], "extent": [2490, 2648]}], "container": true, "attrs": {"id": "indexvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Frame"], "extent": [2648, 2659], "body": [{"type": "para", "indent": 8, "text": ["When on, the node sets each work item\u2019s internal ", {"type": "code", "text": ["frame"]}, " attribute to the result of the given expression. "], "extent": [2684, 2800]}, {"type": "para", "indent": 8, "text": ["For example, to set each work item\u2019s frame number to be the value of its ", {"type": "code", "text": ["source_frame"]}, " attribute, turn on ", {"type": "ui", "text": ["Frame"]}, " and set the expression to ", {"type": "code", "text": ["@source_frame"]}, "."], "extent": [2800, 2969]}], "container": true, "attrs": {"id": "framevalue"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Attributes "], "extent": [2969, 2990], "body": [{"type": "para", "indent": 4, "text": ["You can use the parameters in this section to create work item attributes of various types. Integer and Float attributes take an array size between 1 and 4, and other attribute types only take scalar values. "], "extent": [2990, 3205]}, {"type": "para", "indent": 4, "text": ["If you need to create attributes that contain an array of strings or have a longer array length, please consider using a ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor"], "fullpath": "/nodes/top/pythonprocessor.html"}, " or ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonscript", "type": "link", "text": ["Python Script"], "fullpath": "/nodes/top/pythonscript.html"}, " node instead. "], "extent": [3205, 3477]}, {"type": "para", "indent": 4, "text": ["You can also create attributes using the PDG work item Python API: ", {"scheme": "Py", "value": "pdg.WorkItem#addAttrib", "type": "link", "text": "", "fullpath": "/nodes/top/pdg.WorkItem.html#addAttrib", "fragment": "#addAttrib"}, "."], "extent": [3477, 3578]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Strings"], "extent": [3578, 3591], "body": [{"type": "para", "indent": 8, "text": ["Multiparm that allows you to add/set one or more string attributes."], "extent": [3619, 3696]}], "container": true, "attrs": {"id": "stringattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Name"], "extent": [3696, 3706], "body": [{"type": "para", "indent": 8, "text": ["The name of the string attribute to add/set."], "extent": [3731, 3785]}], "container": true, "attrs": {"id": "stringname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [3785, 3804], "body": [{"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [3833, 3935]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [3935, 3971], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and add the one described by this multiparm entry."], "extent": [4012, 4111]}], "container": true, "attrs": {"id": "string_replaceexisting"}}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [4111, 4144], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [4182, 4249]}], "container": true, "attrs": {"id": "string_keepexisting"}}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [4249, 4290], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning."], "extent": [4330, 4443]}], "container": true, "attrs": {"id": "string_updateexisting"}}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [4443, 4487], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [4523, 4599]}], "container": true, "attrs": {"id": "string_genwarning"}}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [4599, 4641], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [4675, 4750]}], "container": true, "attrs": {"id": "string_generror"}}], "container": true}], "container": true, "attrs": {"id": "stringconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [4750, 4761], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [4787, 4966]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [4966, 4985], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [4985, 5048]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [5048, 5071], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [5071, 5194]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [5194, 5218], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [5218, 5342]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "stringscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Value"], "extent": [5342, 5353], "body": [{"type": "para", "indent": 8, "text": ["The value of the string attribute. This can be an expression that is evaluated for each incoming work item."], "extent": [5379, 5496]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [5496, 5510], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Value"]}, " is an expression, then you must place the expression inside ", {"type": "em", "text": ["backticks"]}, " (`)."], "extent": [5510, 5615]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "stringvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Index"], "extent": [5615, 5626], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, the string value is assigned to the attribute at the specified index. Otherwise, the string is set at index=0."], "extent": [5652, 5804]}], "container": true, "attrs": {"id": "stringindex"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 4, "extent": [5804, 5814]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Integers"], "extent": [5814, 5829], "body": [{"type": "para", "indent": 8, "text": ["A multiparm that allows you to add/set one or more integer attributes."], "extent": [5858, 5938]}], "container": true, "attrs": {"id": "integerattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Name"], "extent": [5938, 5948], "body": [{"type": "para", "indent": 8, "text": ["The name of the integer attribute to add/set."], "extent": [5970, 6025]}], "container": true, "attrs": {"id": "intname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [6025, 6044], "body": [{"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [6070, 6172]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [6172, 6208], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and adds the one described by this multiparm entry. "], "extent": [6253, 6354]}], "container": true, "attrs": {"id": "integer_replaceexisting   "}}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [6354, 6387], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [6426, 6493]}], "container": true, "attrs": {"id": "integer_keepexisting"}}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [6493, 6534], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning. "], "extent": [6581, 6695]}], "container": true, "attrs": {"id": "integer_updateexisting"}}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [6695, 6740], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [6777, 6853]}], "container": true, "attrs": {"id": "integer_genwarning"}}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [6853, 6895], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [6930, 7005]}], "container": true, "attrs": {"id": "integer_generror"}}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 8, "role": "item", "extent": [7005, 7018], "body": [{"type": "para", "indent": 12, "text": ["If you set this parameter to ", {"type": "ui", "text": ["Update Existing Attribute Value"]}, " and specify a ", {"type": "ui", "text": ["Size"]}, " value that is ", {"type": "em", "text": ["less than"]}, " the size of an existing attribute array, only the first ", {"type": "ui", "text": ["Size"]}, " component will be updated. For example, you can use this to update the first three values in a four-component vector without affecting the fourth component."], "extent": [7018, 7367]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "intconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Size"], "extent": [7367, 7377], "body": [{"type": "para", "indent": 8, "text": ["The vector size of the integer attribute (1-4). Use ", {"type": "code", "text": ["1"]}, " for a single scalar value or ", {"type": "code", "text": ["3"]}, " for a 3D vector."], "extent": [7399, 7514]}], "container": true, "attrs": {"id": "intsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [7514, 7525], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [7548, 7727]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [7727, 7746], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [7746, 7809]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [7809, 7832], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [7832, 7955]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [7955, 7979], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [7979, 8103]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "intscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Value"], "extent": [8103, 8114], "body": [{"type": "para", "indent": 8, "text": ["The value for the integer attribute. This can be an expression that is evaluated for each incoming work item."], "extent": [8137, 8256]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [8256, 8270], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Value"]}, " is an expression, then you must place the expression inside ", {"type": "em", "text": ["backticks"]}, " (`)."], "extent": [8270, 8375]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "intvalue"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 4, "extent": [8375, 8385]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Floats"], "extent": [8385, 8398], "body": [{"type": "para", "indent": 8, "text": ["A multiparm that allows you to add/set one or more float attributes."], "extent": [8425, 8503]}], "container": true, "attrs": {"id": "floatattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Name"], "extent": [8503, 8513], "body": [{"type": "para", "indent": 8, "text": ["The name of the float attribute to add/set."], "extent": [8537, 8590]}], "container": true, "attrs": {"id": "floatname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [8590, 8609], "body": [{"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [8637, 8739]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [8739, 8775], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and add the one described by this multiparm entry. "], "extent": [8818, 8918]}], "container": true, "attrs": {"id": "float_replaceexisting   "}}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [8918, 8951], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [8988, 9055]}], "container": true, "attrs": {"id": "float_keepexisting"}}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [9055, 9097], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning. "], "extent": [9136, 9250]}], "container": true, "attrs": {"id": "float_updateexisting"}}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [9250, 9295], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [9330, 9406]}], "container": true, "attrs": {"id": "float_genwarning"}}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [9406, 9449], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [9482, 9557]}], "container": true, "attrs": {"id": "float_generror"}}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 8, "role": "item", "extent": [9557, 9570], "body": [{"type": "para", "indent": 12, "text": ["If you set this parameter to ", {"type": "ui", "text": ["Update Existing Attribute Value"]}, " and specify a ", {"type": "ui", "text": ["Size"]}, " value that is ", {"type": "em", "text": ["less than"]}, " the size of an existing attribute array, only the first ", {"type": "ui", "text": ["Size"]}, " component will be updated. For example, you can use this to update the first three values in a four-component vector without affecting the fourth component."], "extent": [9570, 9919]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "floatconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Size"], "extent": [9919, 9929], "body": [{"type": "para", "indent": 8, "text": ["The vector size of the float attribute (1-4). Use ", {"type": "code", "text": ["1"]}, " for a single scalar value or ", {"type": "code", "text": ["3"]}, " for a 3D vector."], "extent": [9953, 10066]}], "container": true, "attrs": {"id": "floatsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [10066, 10077], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [10102, 10281]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [10281, 10300], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [10300, 10363]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [10363, 10386], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [10386, 10509]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [10509, 10533], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [10533, 10657]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "floatscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Value"], "extent": [10657, 10668], "body": [{"type": "para", "indent": 8, "text": ["The value for the float attribute. This can be an expression that is evaluated for each incoming work item."], "extent": [10693, 10810]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [10810, 10824], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Value"]}, " is an expression, then you must place the expression inside ", {"type": "em", "text": ["backticks"]}, " (`)."], "extent": [10824, 10930]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "floatvalue"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 4, "extent": [10930, 10940]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Dictionaries"], "extent": [10940, 10959], "body": [{"type": "para", "indent": 8, "text": ["Multiparm that allows you to add/set one or more dictionary attributes."], "extent": [10985, 11066]}], "container": true, "attrs": {"id": "dictattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Name"], "extent": [11066, 11076], "body": [{"type": "para", "indent": 8, "text": ["The name of the dictionary attribute to add/set."], "extent": [11099, 11157]}], "container": true, "attrs": {"id": "dictname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [11157, 11176], "body": [{"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [11203, 11305]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [11305, 11341], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and add the one described by this multiparm entry."], "extent": [11341, 11440]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [11440, 11473], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [11473, 11540]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [11540, 11581], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning."], "extent": [11581, 11694]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [11694, 11738], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [11738, 11814]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [11814, 11856], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [11856, 11931]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "dictconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [11931, 11942], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [11966, 12145]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [12145, 12164], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [12164, 12227]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [12227, 12250], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [12250, 12373]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [12373, 12397], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [12397, 12521]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "dictscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Value"], "extent": [12521, 12532], "body": [{"type": "para", "indent": 8, "text": ["The value of the dictionary attribute. This value is evaluated as a Python literal and stored to the dictionary. This can be an expression that is evaluated for each incoming work item."], "extent": [12556, 12751]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [12751, 12765], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Value"]}, " is an expression, then you must place the expression inside ", {"type": "em", "text": ["backticks"]}, " (`)."], "extent": [12765, 12870]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "dictvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Index"], "extent": [12870, 12881], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, the dict value is assigned to the attribute at the specified index. Otherwise, the value is set at index=0."], "extent": [12905, 13054]}], "container": true, "attrs": {"id": "dictindex"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Skip Unsupported Types"], "extent": [13054, 13082], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, keys in the ", {"type": "ui", "text": ["Value"]}, " that refer to unsupported types are skipped instead of treated as errors."], "extent": [13108, 13245]}], "container": true, "attrs": {"id": "dictinvalid"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 4, "extent": [13245, 13255]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["PyObjects"], "extent": [13255, 13271], "body": [{"type": "para", "indent": 8, "text": ["A multiparm that allows you to add/set one or more PyObject attributes."], "extent": [13301, 13390]}, {"type": "para", "indent": 8, "text": ["The expressions used to create PyObjects with this node must be literal expressions, meaning they can only consist of strings, booleans, numbers, lists, dicts and tuples. To create more complicated PyObject attributes, you should use a ", {"scheme": "Node", "value": "/nodes/top/pythonscript", "type": "link", "text": ["Python Script"], "fullpath": "/nodes/top/pythonscript.html"}, " node instead. The ", {"scheme": "Py", "value": "pdg.WorkItem#setPyObjectAttrib", "type": "link", "text": "", "fullpath": "/nodes/top/pdg.WorkItem.html#setPyObjectAttrib", "fragment": "#setPyObjectAttrib"}, " API method can be used to store any type of PyObject to a work item attribute."], "extent": [13390, 13806]}], "container": true, "attrs": {"id": "pyobjectattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Name"], "extent": [13806, 13816], "body": [{"type": "para", "indent": 8, "text": ["The name of the PyObject attribute to add/set."], "extent": [13843, 13899]}], "container": true, "attrs": {"id": "pyobjectname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [13899, 13918], "body": [{"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [13949, 14051]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [14051, 14087], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and adds the one described by this multiparm entry. "], "extent": [14128, 14229]}], "container": true, "attrs": {"id": "pyobj_replaceexisting "}}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [14229, 14262], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [14299, 14366]}], "container": true, "attrs": {"id": "pyobj_keepexisting"}}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [14366, 14407], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning. "], "extent": [14447, 14561]}], "container": true, "attrs": {"id": "pyobj_updateexisting "}}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [14561, 14605], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [14640, 14716]}], "container": true, "attrs": {"id": "pyobj_genwarning"}}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [14716, 14758], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [14791, 14866]}], "container": true, "attrs": {"id": "pyobj_generror"}}], "container": true}], "container": true, "attrs": {"id": "pyobjectconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [14866, 14877], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [14905, 15084]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [15084, 15103], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [15103, 15166]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [15166, 15189], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [15189, 15312]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [15312, 15336], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [15336, 15460]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pyobjectscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Expression"], "extent": [15460, 15476], "body": [{"type": "para", "indent": 8, "text": ["The Python expression for the new PyObject attribute. This can be an expression that is evaluated for each incoming work item. It must consist only of Python literals, meaning that it can only use strings, booleans, numeric values, lists, dictionaries and tuples."], "extent": [15509, 15782]}], "container": true, "attrs": {"id": "pyobjectexpression"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 4, "extent": [15782, 15792]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Files"], "extent": [15792, 15804], "body": [{"type": "para", "indent": 8, "text": ["A multiparm that allows you to add/set one or more output file paths. For each work item, TOPs tracks the file paths of files created by that work item. Often times work items ", {"scheme": null, "value": "/tops/stocknodes#script", "type": "link", "text": ["work script"], "fullpath": "/tops/stocknodes.html#script", "fragment": "#script"}, " update this information automatically, but you can also use this node to set it ", {"type": "em", "text": ["manually"]}, "."], "extent": [15829, 16144]}], "container": true, "attrs": {"id": "resultdata"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Create As"], "extent": [16144, 16159], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Output File"], "extent": [16184, 16205], "body": [{"type": "para", "indent": 12, "text": ["The file is added to the work item\u2019s output file list."], "extent": [16205, 16273]}], "container": true}, {"type": "dt", "indent": 8, "text": ["File Attribute"], "extent": [16273, 16297], "body": [{"type": "para", "indent": 12, "text": ["The file is added to the work item as an attribute with the ", {"type": "code", "text": ["file"]}, " type."], "extent": [16297, 16383]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "resultmenu"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Attribute Name"], "extent": [16383, 16403], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Create As"]}, " is set to ", {"type": "ui", "text": ["Attribute"]}, ", choose the name of the created attribute."], "extent": [16432, 16527]}], "container": true, "attrs": {"id": "resultattrname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Existing Name"], "extent": [16527, 16546], "body": [{"type": "para", "indent": 8, "text": ["This parameter is only used when ", {"type": "ui", "text": ["Create As"]}, " is set to ", {"type": "ui", "text": ["Attribute"]}, "."], "extent": [16575, 16656]}, {"type": "para", "indent": 8, "text": ["Determines how to handle a conflict when an existing attribute with the same name is found. "], "extent": [16656, 16758]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Replace Existing Attribute"], "extent": [16758, 16794], "body": [{"type": "para", "indent": 12, "text": ["The node deletes the old attribute and adds the one described by this multiparm entry. "], "extent": [16834, 16935]}], "container": true, "attrs": {"id": "files_replaceexisting"}}, {"type": "dt", "indent": 8, "text": ["Keep Existing Attribute"], "extent": [16935, 16968], "body": [{"type": "para", "indent": 12, "text": ["The old attribute is kept and no values are modified."], "extent": [17005, 17072]}], "container": true, "attrs": {"id": "files_keepexisting"}}, {"type": "dt", "indent": 8, "text": ["Update Existing Attribute Value"], "extent": [17072, 17113], "body": [{"type": "para", "indent": 12, "text": ["The node attempts to update the value if the attribute type matches, otherwise it issues a warning."], "extent": [17152, 17265]}], "container": true, "attrs": {"id": "files_updateexisting"}}, {"type": "dt", "indent": 8, "text": ["Generate Warning on Type Mis-match"], "extent": [17265, 17309], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning if the attribute type doesn\u2019t match."], "extent": [17344, 17420]}], "container": true, "attrs": {"id": "files_genwarning"}}, {"type": "dt", "indent": 8, "text": ["Generate Error on Type Mis-match"], "extent": [17420, 17463], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error if the attribute type doesn\u2019t match."], "extent": [17496, 17571]}], "container": true, "attrs": {"id": "files_generror"}}], "container": true}], "container": true, "attrs": {"id": "resultconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scope"], "extent": [17571, 17582], "body": [{"type": "para", "indent": 8, "text": ["The scope that the attribute should be created in. By default attributes are created on work items, but they can also be added as global attributes on the graph instead."], "extent": [17608, 17787]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item"], "extent": [17787, 17806], "body": [{"type": "para", "indent": 12, "text": ["The attribute is added to work items in the node."], "extent": [17806, 17869]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Bound)"], "extent": [17869, 17892], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph, but its lifetime is still bound to the work item that created it."], "extent": [17892, 18015]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Graph (Global)"], "extent": [18015, 18039], "body": [{"type": "para", "indent": 12, "text": ["The attribute is set globally on the graph and will exist even after the work item that created it is deleted."], "extent": [18039, 18163]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "resultscope"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["File Path"], "extent": [18163, 18178], "body": [{"type": "para", "indent": 8, "text": ["A file path to add to each work item\u2019s list of file outputs. This can be an expression that is evaluated for each incoming work item."], "extent": [18204, 18347]}], "container": true, "attrs": {"id": "resultvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["File Tag"], "extent": [18347, 18361], "body": [{"type": "para", "indent": 8, "text": ["The ", {"scheme": null, "value": "/tops/filetags", "type": "link", "text": ["file tag"], "fullpath": "/tops/filetags.html"}, " to apply to the ", {"type": "ui", "text": ["File Path"]}, ". For example, ", {"type": "code", "text": ["file/geo"]}, " or ", {"type": "code", "text": ["file/pic"]}, ". This can be an expression that is evaluated for each incoming work item."], "extent": [18385, 18567]}], "container": true, "attrs": {"id": "resulttag"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [18567, 18577], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " or ", {"type": "ui", "text": ["File Tag"]}, " are expressions, then you must place the expression inside ", {"type": "em", "text": ["backticks"]}, " (`)."], "extent": [18577, 18697]}], "container": true}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Take Ownership"], "extent": [18697, 18717], "body": [{"type": "para", "indent": 8, "text": ["Mark the file as ", {"type": "ui", "text": ["owned"]}, " by PDG.  This should be used to indicate that the file was produced by the PDG cook. WARNING: owned ", {"type": "ui", "text": ["Output Files"]}, " are deleted by menu actions like ", {"type": "ui", "text": ["Delete All File Outputs From Disk"]}, "."], "extent": [18741, 18974]}, {"type": "para", "indent": 8, "text": ["In the case of ", {"type": "ui", "text": ["Output Files"]}, ", ", {"type": "ui", "text": ["owned"]}, " additionally indicates the file is owned by the work item. Owned File attributes are not treated as work item Outputs and so they are not deleted by those menu actions."], "extent": [18974, 19195]}], "container": true, "attrs": {"id": "resultown"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Copy File to Working Directory"], "extent": [19195, 19231], "body": [{"type": "para", "indent": 8, "text": ["Indicates that the file should be copied from its source location to the scheduler\u2019s working directory when this work item cooks."], "extent": [19256, 19395]}, {"type": "para", "indent": 8, "text": ["Enabling this toggle sets the ", {"scheme": "Py", "value": "pdg.attribFlag#Transfer", "type": "link", "text": "", "fullpath": "/nodes/top/pdg.attribFlag.html#Transfer", "fragment": "#Transfer"}, " attribute flag on the file attribute or output file added by this node. "], "extent": [19395, 19536]}], "container": true, "attrs": {"id": "resultcopy"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Check File Path"], "extent": [19536, 19557], "body": [{"type": "para", "indent": 8, "text": ["Determines if the node should verify that the file path exists and is readable before adding it to your work items."], "extent": [19591, 19716]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["No File Path Validation"], "extent": [19716, 19749], "body": [{"type": "para", "indent": 12, "text": ["The node does ", {"type": "em", "text": ["not"]}, " perform file validation."], "extent": [19789, 19847]}], "container": true, "attrs": {"id": "checkfilepath_novalid"}}, {"type": "dt", "indent": 8, "text": ["Error on Missing File"], "extent": [19847, 19878], "body": [{"type": "para", "indent": 12, "text": ["The node issues an error when the specified ", {"type": "ui", "text": ["File Path"]}, " ", {"type": "em", "text": ["does not"]}, " exist."], "extent": [19919, 20008]}], "container": true, "attrs": {"id": "checkfilepath_generror"}}, {"type": "dt", "indent": 8, "text": ["Warning on Missing File"], "extent": [20008, 20041], "body": [{"type": "para", "indent": 12, "text": ["The node issues a warning when the specified ", {"type": "ui", "text": ["File Path"]}, " ", {"type": "em", "text": ["does not"]}, " exist."], "extent": [20084, 20174]}], "container": true, "attrs": {"id": "checkfilepath_genwarning"}}], "container": true}], "container": true, "attrs": {"id": "resultcheckfilepath"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Check File When"], "extent": [20174, 20195], "body": [{"type": "para", "indent": 8, "text": ["Determines when the work items are validated. "], "extent": [20223, 20279]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Work Item is Generated"], "extent": [20279, 20311], "body": [{"type": "para", "indent": 12, "text": ["Work items are validated during work item generation."], "extent": [20311, 20378]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Work Item if Cooked"], "extent": [20378, 20407], "body": [{"type": "para", "indent": 12, "text": ["Work items are validated when the work items cook."], "extent": [20407, 20471]}, {"type": "para", "indent": 12, "text": ["Validating files during the cook is useful when you expect the files to be created when something upstream cooks, as opposed to referring to a existing path already on disk."], "extent": [20471, 20658]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "checkpathwhen"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Exists Attribute Name"], "extent": [20658, 20685], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Check File Path"]}, " is set to ", {"type": "ui", "text": ["Warning on Missing File"]}, ", this attribute specifies the name of an integer attribute which will be used to indicate whether the file exists. If the attribute is set to 0, it indicates that the file does not exist, while 1 indicates that the file does exist."], "extent": [20712, 21016]}], "container": true, "attrs": {"id": "existsattrib"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [21016, 21025], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/attributecopy", "type": "link", "text": "", "fullpath": "/nodes/top/attributecopy.html"}], "extent": [21025, 21052]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/attributedelete", "type": "link", "text": "", "fullpath": "/nodes/top/attributedelete.html"}], "extent": [21052, 21081]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/partitionbyattribute", "type": "link", "text": "", "fullpath": "/nodes/top/partitionbyattribute.html"}], "extent": [21081, 21115]}], "container": true}], "text": "Related"}], "title": ["Attribute Create"], "summary": ["Creates or sets an attribute on all incoming work items."], "included": ["/nodes/top/processor_common"]}