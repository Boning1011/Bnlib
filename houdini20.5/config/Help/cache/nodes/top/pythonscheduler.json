{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "pythonscheduler", "icon": "TOP/scheduler", "since": "17.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Python Scheduler"], "extent": [97, 118]}, {"type": "summary", "indent": 0, "text": ["A Python-based programmable Scheduler for PDG."], "extent": [118, 173]}, {"type": "para", "indent": 0, "text": ["This node provides an interface to write Python code for a custom PDG Scheduler\nand use it to schedule work items. The base Scheduler\u2019s callbacks are exposed\nas Python text fields which should be filled in according to their function\ndefinition. Each callback field is then evaluated and executed during the\ngeneral PDG work item schedule workflow. The \n", {"scheme": null, "value": "/tops/schedulers", "type": "link", "text": ["Scheduler node API reference"], "fullpath": "/tops/schedulers.html"}, " has a detailed explanation for\neach of the callback functions that you can implement."], "extent": [173, 662]}, {"type": "para", "indent": 0, "text": ["The Python Scheduler node can be used as is in a TOP network, or it can be\nsaved out to a Python file using the Save To Python button. The Save To Python\nfunctionality will write out a complete implementation of a custom Scheduler\nnode with the filled in callback entries. The Python file should be placed in\nthe PDG Python path (e.g. /home/username/houdini17.5/pdg/types/) so that it will\nbe automatically picked up and registered with the Scheduler Factory. This\nhappens on the launch of Houdini, which means changes to the custom Scheduler\nwill require a relaunch of Houdini."], "extent": [662, 1242]}, {"type": "para", "indent": 0, "text": ["Once registered, the custom Scheduler node can be created by selecting it from\nthe TAB menu under Schedulers. If it does not show up there, either the Python\nfile was not found by Houdini at launch, or the Python file has errors."], "extent": [1242, 1474]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1474, 1486], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Save To Python"], "extent": [1486, 1503], "body": [{"type": "para", "indent": 4, "text": ["Save this node out to a Python file, along with its custom callback entries."], "extent": [1528, 1610]}], "container": true, "attrs": {"id": "savenodescript"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Working Directory"], "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["Specifies the relative directory where the work generates intermediate files and output. The intermediate files are placed in a subdirectory. For the Local Scheduler or HQueue, typically ", {"type": "code", "text": ["$HIP"]}, " is used. For other schedulers, this should be a relative directory to ", {"type": "code", "text": ["Local Shared Root Path"]}, " and ", {"type": "code", "text": ["Remote Shared Root Path"]}, "; this path is then appended to these root paths."], "extent": [60, 433]}], "container": true, "attrs": {"id": "pdg_workingdir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Load Item Data From"], "extent": [7196, 7217], "body": [{"type": "para", "indent": 4, "text": ["Determines how jobs processed by this scheduler should load work item attributes and data. "], "extent": [7250, 7347]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Temporary JSON File"], "extent": [7347, 7372], "body": [{"type": "para", "indent": 8, "text": ["The scheduler writes out a ", {"type": "code", "text": [".json"]}, " file for each work item to the PDG temporary file directory. This option is selected by default."], "extent": [7372, 7513]}], "container": true}, {"type": "dt", "indent": 4, "text": ["RPC Message"], "extent": [7513, 7530], "body": [{"type": "para", "indent": 8, "text": ["The scheduler\u2019s running work items request attributes and data over RPC. If the scheduler is a farm scheduler, then the job scripts running on the farm will also request item data from the submitter when creating their out-of-process work item objects. "], "extent": [7530, 7793]}, {"type": "para", "indent": 8, "text": ["This parameter option removes the need to write data files to disk and is useful when your local and remote machines ", {"type": "em", "text": ["do not"]}, " share a file system."], "extent": [7793, 7949]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemdatasource"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Temp Dir"], "extent": [7949, 7966], "body": [{"type": "para", "indent": 4, "text": ["Determines when PDG should automatically delete the temporary file directory associated with the scheduler."], "extent": [7994, 8107]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Never"], "extent": [8107, 8118], "body": [{"type": "para", "indent": 8, "text": ["PDG never automatically deletes the temp file directory."], "extent": [8118, 8184]}], "container": true}, {"type": "dt", "indent": 4, "text": ["When Scheduler is Deleted"], "extent": [8184, 8215], "body": [{"type": "para", "indent": 8, "text": ["PDG automatically deletes the temp file directory when the scheduler is deleted or when Houdini is closed."], "extent": [8215, 8331]}], "container": true}, {"type": "dt", "indent": 4, "text": ["When Cook Completes"], "extent": [8331, 8356], "body": [{"type": "para", "indent": 8, "text": ["PDG automatically deletes the temp file directory each time a cook completes."], "extent": [8356, 8443]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_deletetempdir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Compress Work Item Data"], "extent": [8443, 8468], "body": [{"type": "para", "indent": 4, "text": ["When on, PDG compresses the work item ", {"type": "code", "text": [".json"]}, " files when writing them to disk."], "extent": [8503, 8587]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Load Item Data From"]}, " is set to ", {"type": "ui", "text": ["Temporary JSON File"]}, "."], "extent": [8587, 8689]}], "container": true, "attrs": {"id": "pdg_compressworkitemdata"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Validate Outputs When Recooking"], "extent": [832, 865], "body": [{"type": "para", "indent": 4, "text": ["When on, PDG validates the output files of the scheduler\u2019s cooked work items when the graph is recooked to see if the files still exist on disk. Work items that are missing output files are then automatically dirtied and cooked again. If any work items are dirtied by parameter changes, then their cache files are also automatically invalidated. ", {"type": "ui", "text": ["Validate Outputs When Recooking"]}, " is ", {"type": "em", "text": ["on"]}, " by default."], "extent": [895, 1302]}], "container": true, "attrs": {"id": "pdg_validateoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Expected Outputs on Disk"], "extent": [1302, 1334], "body": [{"type": "para", "indent": 4, "text": ["When on, PDG looks for any unexpected outputs (for example, like outputs that can result from custom output handling internal logic) that were not explicitly reported when the scheduler\u2019s work items finished cooking. This check occurs immediately after the scheduler marks work items as cooked, and expected outputs that were reported normally are not checked. If PDG finds any files that are different from the expected outputs, then they are automatically added as real output files."], "extent": [1369, 1860]}], "container": true, "attrs": {"id": "pdg_checkexpectedoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Limit Jobs"], "extent": [1860, 1872], "body": [{"type": "para", "indent": 4, "text": ["When enabled, sets the maximum number of jobs that can be submitted by the scheduler at the same time."], "extent": [1895, 2003]}, {"type": "para", "indent": 4, "text": ["For farm schedulers like Tractor or HQueue, this parameter can be used to limit the total number of jobs submitted to the render farm itself. Setting this parameter can help limit the load on the render farm, especially when the PDG graph has a large number of small tasks."], "extent": [2003, 2282]}], "container": true, "attrs": {"id": "pdg_maxtasks"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Block on Failed Work Items"], "extent": [5860, 5888], "body": [{"type": "para", "indent": 4, "text": ["When on, if there are any failed work items on the scheduler, then the cook is blocked from completing and the PDG graph cook is prevented from ending. This allows you to manually retry your failed work items. You can ", {"type": "em", "text": ["cancel"]}, " the scheduler\u2019s cook when it is blocked by failed work items by pressing the ", {"keys": ["ESC"], "type": "keys", "text": null}, " key, clicking the ", {"type": "ui", "text": ["Cancels the current cook"]}, " button in the ", {"scheme": null, "value": "/tops/ui#tasks_bar", "type": "link", "text": ["TOP tasks bar"], "fullpath": "/tops/ui.html#tasks_bar", "fragment": "#tasks_bar"}, ", or by using the cancel API method."], "extent": [5918, 6367]}], "container": true, "attrs": {"id": "pdg_waitforfailures"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scheduling"], "extent": [2001, 2018], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedule"], "extent": [2018, 2036], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onSchedule Callback"], "extent": [2036, 2058], "body": [{"type": "para", "indent": 4, "text": ["Called when a work item needs to scheduled. Returns True if the  work item\n    has been successfully scheduled."], "extent": [2079, 2197]}], "container": true, "attrs": {"id": "onschedule"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedule Static"], "extent": [2197, 2221], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onScheduleStatic Callback"], "extent": [2221, 2249], "body": [{"type": "para", "indent": 4, "text": ["Called when the scheduler should process a static dependency graph."], "extent": [2276, 2351]}], "container": true, "attrs": {"id": "onschedulestatic"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Submit As Job"], "extent": [2351, 2373], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["submitAsJob Callback"], "extent": [2373, 2396], "body": [{"type": "para", "indent": 4, "text": ["Called when the scheduler should cook the entire TOP Network as a standalone\n    job. Returns the status URI for the submitted job."], "extent": [2418, 2555]}], "container": true, "attrs": {"id": "submitasjob"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Initialization and Cleanup"], "extent": [2555, 2588], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Start"], "extent": [2588, 2603], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onStart Callback"], "extent": [2603, 2622], "body": [{"type": "para", "indent": 4, "text": ["Called when the scheduler is registered with PDG. Should initialize or\n    setup scheduler state."], "extent": [2640, 2744]}], "container": true, "attrs": {"id": "onstart"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Stop"], "extent": [2744, 2757], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onStop Callback"], "extent": [2757, 2775], "body": [{"type": "para", "indent": 4, "text": ["Called when the scheduler is unregistered with PDG. Should clean up\n    scheduler state."], "extent": [2792, 2887]}], "container": true, "attrs": {"id": "onstop"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Start Cook"], "extent": [2887, 2906], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onStartCook Callback"], "extent": [2906, 2929], "body": [{"type": "para", "indent": 4, "text": ["Called when a cook starts, before any work items are scheduled. Returns False to cancel the cook, True otherwise."], "extent": [2951, 3071]}], "container": true, "attrs": {"id": "onstartcook"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Stop Cook"], "extent": [3071, 3089], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["onStopCook Callback"], "extent": [3089, 3111], "body": [{"type": "para", "indent": 4, "text": ["Called when cook completes or is canceled. Return value is ignored."], "extent": [3132, 3206]}], "container": true, "attrs": {"id": "onstopcook"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Shared Server"], "extent": [3206, 3226], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["End Shared Server"], "extent": [3226, 3253], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["endSharedServer Callback"], "extent": [3253, 3280], "body": [{"type": "para", "indent": 4, "text": ["Closes an existing shared server instance. Returns True on success."], "extent": [3306, 3379]}], "container": true, "attrs": {"id": "endsharedserver"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Transfer File"], "extent": [3379, 3401], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["transferFile Callback"], "extent": [3401, 3425], "body": [{"type": "para", "indent": 4, "text": ["Called when a file should be copied from the local machine to a remote\n    location (e.g. a shared network drive). These would be files that are\n    necessary to do the wok, so they are copied to the working directory.\n    Returns True if copied the file."], "extent": [3448, 3710]}], "container": true, "attrs": {"id": "transferfile"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Logging"], "extent": [3710, 3724], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Log URI"], "extent": [3724, 3741], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["getLogURI Callback"], "extent": [3741, 3762], "body": [{"type": "para", "indent": 4, "text": ["Returns the URI that points to the log of the given work item\n    (e.g. file:///myfarm/tasklogs/jobid20.log)."], "extent": [3782, 3898]}], "container": true, "attrs": {"id": "getloguri"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Status URI"], "extent": [3898, 3917], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["getStatusURI Callback"], "extent": [3917, 3941], "body": [{"type": "para", "indent": 4, "text": ["Returns the URI that points to the status of the given work item\n    (e.g. http://myfarm/status/jobid20)"], "extent": [3964, 4075]}], "container": true, "attrs": {"id": "getstatusuri"}, "role": "item"}], "container": true, "role": "item_group"}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [4075, 4084], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/deadlinescheduler", "type": "link", "text": "", "fullpath": "/nodes/top/deadlinescheduler.html"}], "extent": [4084, 4116]}], "container": true}], "text": "Related"}], "title": ["Python Scheduler"], "summary": ["A Python-based programmable Scheduler for PDG."], "included": ["/nodes/top/_scheduler_common"]}