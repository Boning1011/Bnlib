{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "pythonscript", "icon": "MISC/python", "tags": "python", "since": "17.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Python Script"], "extent": [97, 115]}, {"type": "summary", "indent": 0, "text": ["Creates work items that run a Python script."], "extent": [115, 168]}, {"type": "para", "indent": 0, "text": ["This node creates work items that run a Python script (in-process or as a scheduled job) during the work item generation phase. You can configure this behavior with the ", {"scheme": null, "value": "#inprocess", "type": "link", "text": ["Evaluate Script During"], "fullpath": "/nodes/top/pythonscript.html#inprocess", "fragment": "#inprocess"}, " menu."], "extent": [168, 380]}, {"type": "para", "indent": 0, "text": ["If the script is configured to run during the generation step, then the code is \nevaluated immediately after the work item is created. No additional work is\ndone while the work item is cooking. You can use this mode to create attributes\nprogrammatically instead of using the ", {"scheme": "Icon", "value": "SOP/attribcreate.svg", "type": "link", "text": "", "fullpath": "/nodes/top/SOP/attribcreate.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/attributecreate", "type": "link", "text": ["Attribute Create"], "fullpath": "/nodes/top/attributecreate.html"}, " node."], "extent": [380, 734]}, {"type": "para", "indent": 0, "text": ["If you select one of the other evaluation modes, then the work item evaluates the script code when it cooks. In-process scripts can access a larger amount of information about the PDG graph as well as other objects and settings within the current Houdini session. If you run the script out-of-process, then the script is limited to accessing the attributes of the work item it is associated with and anything the script can import."], "extent": [734, 1167]}, {"type": "para", "indent": 0, "text": ["The node will always create exactly one work item per upstream item, with the contents of the ", {"scheme": null, "value": "#script", "type": "link", "text": ["Python Code"], "fullpath": "/nodes/top/pythonscript.html#script", "fragment": "#script"}, " field as the work to be done for that item. To generate a custom work item configuration, you should use the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor"], "fullpath": "/nodes/top/pythonprocessor.html"}, " node instead."], "extent": [1167, 1474]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1474, 1479], "body": [{"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["$HH/help/files/pdg_examples/top_pythonscript"]}, " example shows how you can use this node to interact with both in-process and out-of-process work items."], "extent": [1479, 1639]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1639, 1651], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Script"], "extent": [1651, 1665], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Evaluate Script During"], "extent": [1717, 1741], "body": [{"type": "para", "indent": 4, "text": ["Determines when the script code stored on this node is evaluated. "], "extent": [1764, 1836]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Generate"], "extent": [1836, 1850], "body": [{"type": "para", "indent": 8, "text": ["Runs the script when the work item is generating."], "extent": [1850, 1909]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Cook (In-Process)"], "extent": [1909, 1932], "body": [{"type": "para", "indent": 8, "text": ["Runs the script during the cook stage in the same process as the Houdini session."], "extent": [1932, 2023]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Cook (Out-of-Process)"], "extent": [2023, 2050], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": null, "value": "#schedulers", "type": "link", "text": ["scheduler"], "fullpath": "/nodes/top/pythonscript.html#schedulers", "fragment": "#schedulers"}, " runs the script out-of-process during the cook stage."], "extent": [2050, 2139]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Cook (Service)"], "extent": [2139, 2159], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": null, "value": "/tops/services", "type": "link", "text": ["service"], "fullpath": "/tops/services.html"}, " runs the script during the cook stage."], "extent": [2159, 2234]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_cooktype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Run on Service Block"], "extent": [2465, 2487], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not work items in this node should run on the parent service block, if one exists."], "extent": [2517, 2627]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Always"], "extent": [2627, 2639], "body": [{"type": "para", "indent": 8, "text": ["Always run work items on the block\u2019s service, regardless of any other service settings on this node."], "extent": [2639, 2749]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Match"], "extent": [2749, 2760], "body": [{"type": "para", "indent": 8, "text": ["Only run work items on the block\u2019s service if ", {"type": "ui", "text": ["Service Name"]}, " matches the service name that\u2019s used by the block."], "extent": [2760, 2883]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Never"], "extent": [2883, 2894], "body": [{"type": "para", "indent": 8, "text": ["Never run work items on the block\u2019s service."], "extent": [2894, 2948]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_useserviceblock"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Service Name"], "extent": [2948, 2962], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Cook Type"]}, " is set to the ", {"type": "ui", "text": ["Service"]}, ", this parameter is used to specify the name of the service. For more information on using services, see the ", {"scheme": null, "value": "/tops/services", "type": "link", "text": ["PDG Service Manager"], "fullpath": "/tops/services.html"}, " documentation."], "extent": [2988, 3198]}], "container": true, "attrs": {"id": "pdg_servicename"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Python Executable "], "extent": [2326, 2352], "body": [{"type": "para", "indent": 4, "text": ["The following parameters configure which Python executable to use to run the script code and what arguments to pass to the executable."], "extent": [2352, 2493]}, {"type": "para", "indent": 4, "text": ["These parameters are ", {"type": "em", "text": ["only"]}, " available when the node is configured to run out-of-process by the ", {"type": "ui", "text": ["Cook (Out-of-Process)"]}, " option in the ", {"scheme": null, "value": "#inprocess", "type": "link", "text": ["Evaluate Script During"], "fullpath": "/nodes/top/pythonscript.html#inprocess", "fragment": "#inprocess"}, " menu."], "extent": [2493, 2675]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Python Bin"], "extent": [2675, 2691], "body": [{"type": "para", "indent": 8, "text": ["Determines which Python executable to use to run the script."], "extent": [2715, 2785]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Hython"], "extent": [2785, 2801], "body": [{"type": "para", "indent": 12, "text": ["Use ", {"type": "code", "text": ["hython"]}, " to run the script."], "extent": [2801, 2846]}], "container": true}, {"type": "dt", "indent": 8, "text": ["PDG Python"], "extent": [2846, 2866], "body": [{"type": "para", "indent": 12, "text": ["Use PDG Python to run the script."], "extent": [2866, 2913]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom"], "extent": [2913, 2929], "body": [{"type": "para", "indent": 12, "text": ["Use a custom Python executable to run the script."], "extent": [2929, 2992]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Virtual Environment"], "extent": [2992, 3021], "body": [{"type": "para", "indent": 12, "text": ["Run the script on the Python interepter associated with a virtual environment."], "extent": [3021, 3113]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pythonbin"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Python Bin"], "extent": [3113, 3136], "body": [{"type": "para", "indent": 8, "text": ["Determines the path to the Python executable."], "extent": [3157, 3212]}, {"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Python Bin"]}, " is set to ", {"type": "ui", "text": ["Custom"]}, "."], "extent": [3212, 3296]}], "container": true, "attrs": {"id": "python"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Venv Path"], "extent": [3296, 3311], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Python Bin"]}, " is set to ", {"type": "ui", "text": ["Virtual Environment"]}, ", this parameter specifies the path to the virtual environment to use when running the script."], "extent": [3336, 3493]}], "container": true, "attrs": {"id": "pythonvenv"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Python Arguments"], "extent": [3493, 3515], "body": [{"type": "para", "indent": 8, "text": ["Specifies the extra arguments to pass to the Python executable itself to configure the behavior of the interpreter."], "extent": [3540, 3665]}, {"type": "para", "indent": 8, "text": ["By default, the node includes ", {"type": "code", "text": ["-u"]}, " as an argument for out-of-process Python tasks which disables standard output buffering."], "extent": [3665, 3798]}], "container": true, "attrs": {"id": "pythonargs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Script Arguments"], "extent": [3798, 3820], "body": [{"type": "para", "indent": 8, "text": ["Specifies the arguments to pass to the Python script. These values are accessible in the script through ", {"type": "code", "text": ["sys.argv[1:]"]}, "."], "extent": [3844, 3973]}], "container": true, "attrs": {"id": "extraargs"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Reset Python Path Variables"], "extent": [3973, 4006], "body": [{"type": "para", "indent": 8, "text": ["When on, resets the ", {"type": "code", "text": ["PYTHONHOME"]}, " and ", {"type": "code", "text": ["PYTHONPATH"]}, " variables that are defined by Houdini in the external Python process. This is necessary when using a Python version that is incompatible with the one that is built into Houdini."], "extent": [4032, 4269]}], "container": true, "attrs": {"id": "resetpython"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Load as Native Work Item"], "extent": [4269, 4299], "body": [{"type": "para", "indent": 8, "text": ["By default, PDG loads work items as a ", {"type": "code", "text": ["pdgjson.WorkItem"]}, " object which mimics the in-process Python API using a thin Python wrapper around the work item\u2019s JSON data. This type of work item can be loaded in any Python interpreter, not just a Houdini-based one. When cooking Out-of-Process using ", {"type": "code", "text": ["hython"]}, " as the interepter, however, you can enable this toggle to tell PDG to load a full in-process work item for the duration of the job."], "extent": [4328, 4771]}], "container": true, "attrs": {"id": "nativeworkitem"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Batching "], "extent": [4771, 4788], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Batch Type"], "extent": [4788, 4805], "body": [{"type": "para", "indent": 8, "text": ["Determines whether or not batching should be enabled, and what type of batch the node should create."], "extent": [4829, 4939]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["None"], "extent": [4939, 4953], "body": [{"type": "para", "indent": 12, "text": ["Work items in the node cook normally, and are not batched."], "extent": [4953, 5025]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Fixed"], "extent": [5025, 5040], "body": [{"type": "para", "indent": 12, "text": ["A batch with a fixed size determined by the ", {"type": "ui", "text": ["Batch Size"]}, " parameter, is created each time this node generates tasks."], "extent": [5040, 5171]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Dynamic"], "extent": [5171, 5188], "body": [{"type": "para", "indent": 12, "text": ["A batch with an unspecified size is created each time this node generates tasks. The script code itself will determine how big the batch is, by adding sub items to the batch as the script executes."], "extent": [5188, 5399]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "batchtype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Run Script Code"], "extent": [5399, 5420], "body": [{"type": "para", "indent": 8, "text": ["Determines whether the ", {"type": "ui", "text": ["Python Code"]}, " should be run once per sub item in the batch, with PDG managing the batch\u2019s life time, or if the code manually manages the batch sub items."], "extent": [5445, 5633]}], "container": true, "attrs": {"id": "scripttype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Batch Size"], "extent": [5633, 5649], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Batch Type"]}, " is set to ", {"type": "ui", "text": ["Fixed"]}, ", this parameter determines the number of sub items in the batch."], "extent": [5673, 5787]}], "container": true, "attrs": {"id": "batchsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Setup Script"], "extent": [5787, 5805], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Run Script Code"]}, " is set to ", {"type": "ui", "text": ["Once per Sub Item"]}, ", this parameter can be used to specify a block of Python code that runs once, before the batching itself begins processing."], "extent": [5829, 6019]}], "container": true, "attrs": {"id": "prescript"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Variable Expansion "], "extent": [6019, 6046]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Expand Variables in Script"], "extent": [6046, 6075], "body": [{"type": "para", "indent": 4, "text": ["By default, PDG evaluates the script parameter as a raw string. This means that any ", {"type": "code", "text": ["$variables"]}, " or expressions in back ticks are preserved and included as part of the script. When this parameter is turned ", {"type": "em", "text": ["on"]}, ", PDG applies variable/expression expansion immediately when it evaluates the script. Variables or expressions enclosed in back ticks are replaced with their evaluated values in the final script."], "extent": [6098, 6509]}], "container": true, "attrs": {"id": "expandscript"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expand Variables in String Attributes"], "extent": [6509, 6548], "body": [{"type": "para", "indent": 4, "text": ["When on, PDG will expand ", {"type": "code", "text": ["$variables"]}, " in the string attributes when loading work items into the standalone Python process. Variable expansion includes any environment variable, as well as PDG-specific tokens like ", {"type": "code", "text": ["PDG_DIR"]}, " or ", {"type": "code", "text": ["PDG_TEMP"]}, "."], "extent": [6572, 6815]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Evaluate Script During"]}, " is set to ", {"type": "ui", "text": ["Cook (Out-of-Process)"]}, "."], "extent": [6815, 6922]}], "container": true, "attrs": {"id": "expandstrings"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Python Code "], "extent": [6922, 6942], "body": [{"type": "para", "indent": 4, "text": ["The Python code that is run for each work item."], "extent": [6963, 7020]}, {"type": "para", "indent": 4, "text": ["When running out-of-process, the Python interpreter specified by ", {"scheme": null, "value": "#pythonbin", "type": "link", "text": ["Python Bin"], "fullpath": "/nodes/top/pythonscript.html#pythonbin", "fragment": "#pythonbin"}, " or ", {"scheme": null, "value": "#pythonsaves", "type": "link", "text": ["Custom Python Bin"], "fullpath": "/nodes/top/pythonscript.html#pythonsaves", "fragment": "#pythonsaves"}, " saves the code to disk and executes it. The script has access to the ", {"type": "code", "text": ["work_item"]}, " variable which provides an API to access the name, index, frame, and attributes of the work item associated with the script. Additionally, you can use the ", {"type": "code", "text": ["intData"]}, ", ", {"type": "code", "text": ["floatData"]}, ", and ", {"type": "code", "text": ["strData"]}, " helper functions to query attributes on the work item."], "extent": [7020, 7479]}, {"type": "para", "indent": 4, "text": ["The script also has access to the ", {"type": "code", "text": ["graph"]}, " variable, which can be used to look up global attributes. For out-of-process work items the ", {"type": "code", "text": ["graph"]}, " object only has methods for querying attribute data, but for in-process work item the variable is set to the ", {"scheme": "Py", "value": "pdg.Graph", "type": "link", "text": "", "fullpath": "/nodes/top/pdg.Graph.html"}, " that the work item belongs to."], "extent": [7479, 7781]}, {"type": "para", "indent": 4, "text": ["When running in-process or during the generation stage, the Python interpreter embedded in Houdini runs the code. In addition to the ", {"type": "code", "text": ["work_item"]}, " variable, the ", {"type": "code", "text": ["self"]}, " and ", {"type": "code", "text": ["parent_item"]}, " variables are also available. The ", {"type": "code", "text": ["self"]}, " variable is a reference to the node that owns the work item and the ", {"type": "code", "text": ["parent_item"]}, " variable is a reference to the parent or ", {"type": "code", "text": ["None"]}, "."], "extent": [7781, 8142]}], "container": true, "attrs": {"id": "script"}}]}, {"level": 2, "id": "cacheandoutput", "container": true, "type": "h", "indent": 0, "text": ["Caching and Output Files"], "extent": [8142, 8190], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Cache Mode"], "extent": [1270, 1282], "body": [{"type": "para", "indent": 4, "text": ["Determines how the processor node handles work items that report expected file results."], "extent": [1306, 1399]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [1399, 1414], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. If the file ", {"type": "em", "text": ["does not"]}, " exist on disk, the work item is scheduled as normal. If upstream work item dependencies write out new\n        files during a cook, the cache files on work items in this node will\n        also be marked as out-of-date."], "extent": [1414, 1775]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic (Ignore Upstream)"], "extent": [1775, 1808], "body": [{"type": "para", "indent": 8, "text": ["The same as ", {"type": "ui", "text": ["Automatic"]}, ", except upstream file writes ", {"type": "em", "text": ["do not"]}, " invalidate\n        cache files on work items in this node and this node will only check output files for its own work items."], "extent": [1808, 2006]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Read Files"], "extent": [2006, 2022], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as cooked without being scheduled. Otherwise the work item is marked as failed."], "extent": [2022, 2179]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Write Files"], "extent": [2179, 2196], "body": [{"type": "para", "indent": 8, "text": ["Work items are always scheduled and the expected result file is ignored even if it exists on disk."], "extent": [2196, 2304]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_cachemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Copy Inputs to Outputs"], "extent": [8233, 8257], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not work items in this node should copy input files to their output file list."], "extent": [8279, 8385]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Never"], "extent": [8385, 8396], "body": [{"type": "para", "indent": 8, "text": ["Never copy inputs files the output file list."], "extent": [8396, 8451]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Always"], "extent": [8451, 8463], "body": [{"type": "para", "indent": 8, "text": ["Always copy inputs files the output file list."], "extent": [8463, 8519]}], "container": true}, {"type": "dt", "indent": 4, "text": ["If Script Doesn\u2019t Add Outputs"], "extent": [8519, 8554], "body": [{"type": "para", "indent": 8, "text": ["By default, input files are only copied if the Python Script does ", {"type": "em", "text": ["not"]}, " add any new output files on its own."], "extent": [8554, 8672]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "copyoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expected Outputs From"], "extent": [8672, 8695], "body": [{"type": "para", "indent": 4, "text": ["Determines how expected output files should be specified."], "extent": [8725, 8788]}], "container": true, "attrs": {"id": "expectedoutputsfrom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Name"], "extent": [8788, 8804], "body": [{"type": "para", "indent": 4, "text": ["Specifies the name of the attribute that contains the file paths(s)."], "extent": [8833, 8907]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Expected Outputs From"]}, " is set to ", {"type": "ui", "text": ["Attribute Name"]}, ", "], "extent": [8907, 9007]}], "container": true, "attrs": {"id": "expectedoutputattr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Custom File Tag"], "extent": [9007, 9024], "body": [{"type": "para", "indent": 4, "text": ["When on, the custom tag value will be assigned to all output files. Otherwise, PDG will use the existing tag for the file if one has been set, or pick one automatically based on the file extension if a tag does not exist."], "extent": [9052, 9279]}], "container": true, "attrs": {"id": "expectedoutputtag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expected Outputs"], "extent": [9279, 9297], "body": [{"type": "para", "indent": 4, "text": ["Determines the number of file list entries."], "extent": [9327, 9376]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Expected Outputs From"]}, " is set to ", {"type": "ui", "text": ["File List"]}, "."], "extent": [9376, 9470]}], "container": true, "attrs": {"id": "expectedoutputfiles"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [9470, 9483], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to the file."], "extent": [9512, 9549]}], "container": true, "attrs": {"id": "expectedoutputfile"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedulers"], "extent": [9549, 9566], "body": [], "attrs": {"id": "schedulers"}}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["TOP Scheduler Override"], "extent": [6683, 6707], "body": [{"type": "para", "indent": 4, "text": ["This parameter overrides the TOP scheduler for this node."], "extent": [6730, 6793]}], "container": true, "attrs": {"id": "topscheduler"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Schedule When"], "extent": [10796, 10811], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this parameter can be used to specify an expression that determines which work items from the node should be scheduled. If the expression returns zero for a given work item, that work item will immediately be marked as cooked instead of being queued with a scheduler. If the expression returns a non-zero value, the work item is scheduled normally."], "extent": [10838, 11206]}], "container": true, "attrs": {"id": "pdg_schedulewhen"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Label"], "extent": [9661, 9678], "body": [{"type": "para", "indent": 4, "text": ["Determines how the node should label its work items. This parameter allows you to assign non-unique label strings to your work items which are then used to identify the work items in the attribute panel, task bar, and scheduler job names."], "extent": [9706, 9950]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Default Label"], "extent": [9950, 9974], "body": [{"type": "para", "indent": 8, "text": ["The work items in this node will use the default label from the TOP network, or have no label if the default is unset."], "extent": [9974, 10102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [10102, 10135], "body": [{"type": "para", "indent": 8, "text": ["The work items inherit their labels from their parent work items.        "], "extent": [10135, 10218]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [10218, 10242], "body": [{"type": "para", "indent": 8, "text": ["The work item label is set to the ", {"type": "ui", "text": ["Label Expression"]}, " custom expression which is evaluated for each item."], "extent": [10242, 10358]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Label"], "extent": [10358, 10383], "body": [{"type": "para", "indent": 8, "text": ["The work item label is defined in the node\u2019s internal logic."], "extent": [10383, 10453]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemlabel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Label Expression"], "extent": [10453, 10471], "body": [{"type": "para", "indent": 4, "text": ["When on, this parameter specifies a custom label for work items created by this node. The parameter can be an expression that includes references to work item attributes or built-in properties. For example, ", {"type": "code", "text": ["$OS: @pdg_frame"]}, " will set the label of each work item based on its frame value."], "extent": [10503, 10796]}], "container": true, "attrs": {"id": "pdg_workitemlabelexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Priority"], "extent": [7682, 7702], "body": [{"type": "para", "indent": 4, "text": ["This parameter determines how the current scheduler prioritizes the work items in this node."], "extent": [7733, 7831]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [7831, 7864], "body": [{"type": "para", "indent": 11, "text": ["The work items inherit their priority from their parent items. If a work item has no parent, its priority is set to 0."], "extent": [7864, 7995]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [7995, 8019], "body": [{"type": "para", "indent": 11, "text": ["The work item priority is set to the value of ", {"type": "ui", "text": ["Priority Expression"]}, "."], "extent": [8019, 8102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Priority"], "extent": [8102, 8130], "body": [{"type": "para", "indent": 7, "text": ["The work item priority is set based on the node\u2019s own internal priority calculations."], "extent": [8130, 8235]}, {"type": "para", "indent": 7, "text": ["This option is only available on the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor TOP"], "fullpath": "/nodes/top/pythonprocessor.html"}, ", ", {"scheme": "Icon", "value": "TOP/ropfetch.svg", "type": "link", "text": "", "fullpath": "/nodes/top/TOP/ropfetch.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": ["ROP Fetch TOP"], "fullpath": "/nodes/top/ropfetch.html"}, ", and ROP Output TOP nodes. These nodes define their own prioritization schemes that are implemented in their node logic."], "extent": [8235, 8531]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitempriority"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Priority Expression"], "extent": [8531, 8552], "body": [{"type": "para", "indent": 4, "text": ["This parameter specifies an expression for work item priority. The expression is evaluated for each work item in the node."], "extent": [8587, 8715]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Work Item Priority"]}, " is set to ", {"type": "ui", "text": ["Custom Expression"]}, "."], "extent": [8715, 8814]}], "container": true, "attrs": {"id": "pdg_workitempriorityexpr"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [9872, 9881], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": "", "fullpath": "/nodes/top/pythonprocessor.html"}], "extent": [9881, 9910]}], "container": true}], "text": "Related"}], "title": ["Python Script"], "summary": ["Creates work items that run a Python script."], "included": ["/nodes/top/processor_common"]}