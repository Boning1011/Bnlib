{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "pythonvenv", "icon": "TOP/pythonvenv", "since": "20.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Python Virtual Environment"], "extent": [120, 151]}, {"type": "summary", "indent": 0, "text": ["Creates a Python virtual environment using TOPs"], "extent": [151, 207]}, {"type": "para", "indent": 0, "text": ["This node lets you create tasks that initialize a Python virtual environment\nand install packages in the environment. You can choose the version of Python\nto use for the environment, and specify the list of required packages as a\nstring, dictionary or file on disk."], "extent": [207, 474]}, {"level": 1, "id": "top_attributes", "container": true, "type": "top_attributes_section", "indent": 0, "role": "section", "extent": [474, 490], "body": [{"type": "top_attributes_item_group", "body": [{"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["requirements"]}], "role": "item", "extent": [490, 509], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "code", "text": ["requirementstype"]}, " is 2 or 3, this attribute contains a string\n    representation of the required packages and package versions."], "extent": [528, 667]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["requirementshfs"]}], "role": "item", "extent": [667, 688], "body": [{"type": "para", "indent": 4, "text": ["The list of Houdini Python modules to copy, if ", {"type": "ui", "text": ["Houdini Modules"]}, " is\n    enabled."], "extent": [707, 795]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["requirementshfsroot"]}], "role": "item", "extent": [795, 820], "body": [{"type": "para", "indent": 4, "text": ["The path to the HFS directory to Houdini\u2019s Python modules from, if\n    ", {"type": "ui", "text": ["Houdini Modules"]}, " is enabled."], "extent": [839, 947]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["requirementspath"]}], "role": "item", "extent": [947, 969], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "code", "text": ["requirementstype"]}, " is 1, this attribute is set to the path to the\n    requirements.txt file with packages to install in the venv."], "extent": [988, 1128]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["requirementstype"]}], "role": "item", "extent": [1128, 1150], "body": [{"type": "para", "indent": 4, "text": ["The enum value that determines how package requirements should be installed"], "extent": [1166, 1247]}], "container": true, "attrs": {"type": "int"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["venvroot"]}], "role": "item", "extent": [1247, 1261], "body": [{"type": "para", "indent": 4, "text": ["The path on disk to the virtual environment"], "extent": [1280, 1329]}], "container": true, "attrs": {"type": "string"}}], "container": true, "role": "item_group"}], "text": "Top_attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1329, 1341], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Virtual Environment"], "extent": [1341, 1369], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Mode"], "extent": [1270, 1282], "body": [{"type": "para", "indent": 4, "text": ["Determines how the processor node handles work items that report expected file results."], "extent": [1306, 1399]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [1399, 1414], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. If the file ", {"type": "em", "text": ["does not"]}, " exist on disk, the work item is scheduled as normal. If upstream work item dependencies write out new\n        files during a cook, the cache files on work items in this node will\n        also be marked as out-of-date."], "extent": [1414, 1775]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic (Ignore Upstream)"], "extent": [1775, 1808], "body": [{"type": "para", "indent": 8, "text": ["The same as ", {"type": "ui", "text": ["Automatic"]}, ", except upstream file writes ", {"type": "em", "text": ["do not"]}, " invalidate\n        cache files on work items in this node and this node will only check output files for its own work items."], "extent": [1808, 2006]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Read Files"], "extent": [2006, 2022], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as cooked without being scheduled. Otherwise the work item is marked as failed."], "extent": [2022, 2179]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Write Files"], "extent": [2179, 2196], "body": [{"type": "para", "indent": 8, "text": ["Work items are always scheduled and the expected result file is ignored even if it exists on disk."], "extent": [2196, 2304]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_cachemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Environment Path"], "extent": [1463, 1481], "body": [{"type": "para", "indent": 4, "text": ["The path to the virtual environment on disk."], "extent": [1500, 1550]}], "container": true, "attrs": {"id": "venvpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Python Bin"], "extent": [1550, 1562], "body": [{"type": "para", "indent": 4, "text": ["Determines which Python executable to use when creating the virtual\n    environment and installing packages. This is also the version of Python\n    that will be associated with the venv."], "extent": [1582, 1774]}], "container": true, "attrs": {"id": "pythonbin"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Custom Python Bin"], "extent": [1774, 1793], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Python Bin"]}, " is set to ", {"type": "ui", "text": ["Custom"]}, ", this parameter determines the path\n    to the Python interpreter to use when creating the virtual environment."], "extent": [1810, 1968]}], "container": true, "attrs": {"id": "python"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Symlinks"], "extent": [1968, 1982], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the virtual environment is created with symlinks to the source\n    Python binaries if possible. This is recommended when creating a virtual\n    environment using Houdini\u2019s Python interpreter."], "extent": [2004, 2215]}], "container": true, "attrs": {"id": "venvsymlink"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Load Packages From"], "extent": [2215, 2236], "body": [{"type": "para", "indent": 4, "text": ["Determines how PDG should determine the list of packages that should be\n    installed in the virtual environment."], "extent": [2259, 2378]}], "container": true, "attrs": {"id": "requirements"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["File Source"], "extent": [2378, 2391], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Load Packages From"]}, " is set to ", {"type": "ui", "text": ["Requirements File"]}, ", this parameter\n    determines how the file is specified."], "extent": [2410, 2533]}], "container": true, "attrs": {"id": "filetype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["File Tag"], "extent": [2533, 2543], "body": [{"type": "para", "indent": 4, "text": ["When loading requirements from a file with ", {"type": "ui", "text": ["File Source"]}, " set to\n    ", {"type": "ui", "text": ["Upstream Output File"]}, ", this parameter specifies the file tag of the\n    input requirements file."], "extent": [2561, 2736]}], "container": true, "attrs": {"id": "filetag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Custom File"], "extent": [2736, 2749], "body": [{"type": "para", "indent": 4, "text": ["When loading requirements from a file with ", {"type": "ui", "text": ["File Source"]}, " set to\n    ", {"type": "ui", "text": ["Custom File"]}, ", this parameter determines the path to the requirements\n    file."], "extent": [2770, 2927]}], "container": true, "attrs": {"id": "customfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Package List"], "extent": [2927, 2941], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Load Packages From"]}, " is set to ", {"type": "ui", "text": ["Package List"]}, ", this parameter can be\n    set to a space or comma separated list of packages to install the virtual\n    environment."], "extent": [2968, 3144]}], "container": true, "attrs": {"id": "requirementslist"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Packages"], "extent": [3144, 3154], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Load Packages From"]}, " is set to ", {"type": "ui", "text": ["Package Dictionary"]}, ", this parameter\n    can be set to a series of key/value pairs representing the name and version\n    of the packages to install."], "extent": [3181, 3373]}], "container": true, "attrs": {"id": "requirementsdict"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Houdini Modules"], "extent": [3373, 3390], "body": [{"type": "para", "indent": 4, "text": ["A comma-separated list of Python module folders from Houdini\u2019s Python\n    path, i.e. ", {"type": "code", "text": ["$HHP"]}, ", that should be copied into the virtual environment."], "extent": [3416, 3566]}], "container": true, "attrs": {"id": "requirementshfs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Add Environment Path to Output Files"], "extent": [3566, 3604], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, the virtual environment path is added as an\n    output file to the work item(s) generated by this node. This parameter is\n    required in order for work items to cook from cache \u2013 if the venv path\n    exists, then the work item will be treated as cached and won\u2019t cook at all."], "extent": [3625, 3940]}], "container": true, "attrs": {"id": "venvoutput"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedulers"], "extent": [3940, 3957], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["TOP Scheduler Override"], "extent": [6683, 6707], "body": [{"type": "para", "indent": 4, "text": ["This parameter overrides the TOP scheduler for this node."], "extent": [6730, 6793]}], "container": true, "attrs": {"id": "topscheduler"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Schedule When"], "extent": [10796, 10811], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this parameter can be used to specify an expression that determines which work items from the node should be scheduled. If the expression returns zero for a given work item, that work item will immediately be marked as cooked instead of being queued with a scheduler. If the expression returns a non-zero value, the work item is scheduled normally."], "extent": [10838, 11206]}], "container": true, "attrs": {"id": "pdg_schedulewhen"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Label"], "extent": [9661, 9678], "body": [{"type": "para", "indent": 4, "text": ["Determines how the node should label its work items. This parameter allows you to assign non-unique label strings to your work items which are then used to identify the work items in the attribute panel, task bar, and scheduler job names."], "extent": [9706, 9950]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Default Label"], "extent": [9950, 9974], "body": [{"type": "para", "indent": 8, "text": ["The work items in this node will use the default label from the TOP network, or have no label if the default is unset."], "extent": [9974, 10102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [10102, 10135], "body": [{"type": "para", "indent": 8, "text": ["The work items inherit their labels from their parent work items.        "], "extent": [10135, 10218]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [10218, 10242], "body": [{"type": "para", "indent": 8, "text": ["The work item label is set to the ", {"type": "ui", "text": ["Label Expression"]}, " custom expression which is evaluated for each item."], "extent": [10242, 10358]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Label"], "extent": [10358, 10383], "body": [{"type": "para", "indent": 8, "text": ["The work item label is defined in the node\u2019s internal logic."], "extent": [10383, 10453]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemlabel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Label Expression"], "extent": [10453, 10471], "body": [{"type": "para", "indent": 4, "text": ["When on, this parameter specifies a custom label for work items created by this node. The parameter can be an expression that includes references to work item attributes or built-in properties. For example, ", {"type": "code", "text": ["$OS: @pdg_frame"]}, " will set the label of each work item based on its frame value."], "extent": [10503, 10796]}], "container": true, "attrs": {"id": "pdg_workitemlabelexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Priority"], "extent": [7682, 7702], "body": [{"type": "para", "indent": 4, "text": ["This parameter determines how the current scheduler prioritizes the work items in this node."], "extent": [7733, 7831]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [7831, 7864], "body": [{"type": "para", "indent": 11, "text": ["The work items inherit their priority from their parent items. If a work item has no parent, its priority is set to 0."], "extent": [7864, 7995]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [7995, 8019], "body": [{"type": "para", "indent": 11, "text": ["The work item priority is set to the value of ", {"type": "ui", "text": ["Priority Expression"]}, "."], "extent": [8019, 8102]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Priority"], "extent": [8102, 8130], "body": [{"type": "para", "indent": 7, "text": ["The work item priority is set based on the node\u2019s own internal priority calculations."], "extent": [8130, 8235]}, {"type": "para", "indent": 7, "text": ["This option is only available on the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor TOP"], "fullpath": "/nodes/top/pythonprocessor.html"}, ", ", {"scheme": "Icon", "value": "TOP/ropfetch.svg", "type": "link", "text": "", "fullpath": "/nodes/top/TOP/ropfetch.svg.html"}, " ", {"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": ["ROP Fetch TOP"], "fullpath": "/nodes/top/ropfetch.html"}, ", and ROP Output TOP nodes. These nodes define their own prioritization schemes that are implemented in their node logic."], "extent": [8235, 8531]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitempriority"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Priority Expression"], "extent": [8531, 8552], "body": [{"type": "para", "indent": 4, "text": ["This parameter specifies an expression for work item priority. The expression is evaluated for each work item in the node."], "extent": [8587, 8715]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Work Item Priority"]}, " is set to ", {"type": "ui", "text": ["Custom Expression"]}, "."], "extent": [8715, 8814]}], "container": true, "attrs": {"id": "pdg_workitempriorityexpr"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [4242, 4251], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/pythonscript", "type": "link", "text": "", "fullpath": "/nodes/top/pythonscript.html"}], "extent": [4251, 4278]}], "container": true}], "text": "Related"}], "title": ["Python Virtual Environment"], "summary": ["Creates a Python virtual environment using TOPs"], "included": ["/nodes/top/processor_common"]}