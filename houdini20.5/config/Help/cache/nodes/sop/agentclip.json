{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "agentclip", "icon": "CROWDS/agentedit", "version": "2.0", "since": "17.0", "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Agent Clip"], "extent": [99, 114]}, {"type": "summary", "indent": 0, "text": ["Adds new clips to agent primitives."], "extent": [114, 158]}, {"type": "para", "indent": 0, "text": ["This adds additional ", {"scheme": null, "value": "/crowds/agents", "type": "link", "text": ["animation clips"], "fullpath": "/crowds/agents.html"}, " to an agent primitive\u2019s definition for driving its skeleton."], "extent": [158, 274]}, {"type": "para", "indent": 0, "text": ["When loading a clip from a CHOP or a file, the channels within the clip should\nbe of the form ", {"type": "code", "text": ["transform_name:channel_name"]}, " where ", {"type": "code", "text": ["transform_name"]}, " is a string\nmatching the values found by calling the ", {"scheme": "Vex", "value": "/vex/functions/agenttransformnames", "type": "link", "text": "", "fallback_text": "agenttransformnames()", "fullpath": "/vex/functions/agenttransformnames.html"}, "() VEX\nfunction and ", {"type": "code", "text": ["channel_name"]}, " is one of ", {"type": "code", "text": ["tx"]}, ", ", {"type": "code", "text": ["ty"]}, ", ", {"type": "code", "text": ["tz"]}, ", ", {"type": "code", "text": ["rx"]}, ", ", {"type": "code", "text": ["ry"]}, ", ", {"type": "code", "text": ["rz"]}, ", ", {"type": "code", "text": ["sx"]}, ",\n", {"type": "code", "text": ["sy"]}, ", or ", {"type": "code", "text": ["sz"]}, ". The channels starting with ", {"type": "code", "text": ["t"]}, " denote translation, ", {"type": "code", "text": ["r"]}, " denote\nrotation, and ", {"type": "code", "text": ["s"]}, " denote scale. The resulting transforms will be treated as\n", {"type": "em", "text": ["local"]}, " transforms, such as those returned by the ", {"scheme": "Vex", "value": "/vex/functions/agentlocaltransforms", "type": "link", "text": "", "fallback_text": "agentlocaltransforms()", "fullpath": "/vex/functions/agentlocaltransforms.html"}, "\nVEX function (ie. they are relative to the corresponding parent transform in\nthe agent\u2019s skeleton)."], "extent": [274, 917]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [917, 929], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [929, 937], "body": [{"type": "para", "indent": 4, "text": ["The agent primitives in the input geometry that should be modified."], "extent": [937, 1010]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Current Clip"], "extent": [1010, 1028], "body": [{"type": "para", "indent": 4, "text": ["Changes the current animation clip of the agent. This can be useful for previewing new clips."], "extent": [1028, 1127]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Clip Time"], "extent": [1127, 1142], "body": [{"type": "para", "indent": 4, "text": ["Sets the current time of the agent\u2019s animation clip."], "extent": [1142, 1200]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clip Time"], "extent": [1200, 1211], "body": [{"type": "para", "indent": 4, "text": ["The current time for the agent\u2019s animation clip."], "extent": [1211, 1265]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Apply Clip Locomotion"], "extent": [1265, 1288], "body": [{"type": "para", "indent": 4, "text": ["If enabled, applies the clip\u2019s ", {"type": "code", "text": ["__locomotion__"]}, " transform so that you can easily test locomotive clips."], "extent": [1288, 1397]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Locomotion Joint"], "extent": [7410, 7436], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this will create an extra joint named ", {"type": "code", "text": ["__locomotion__"]}, " which\n    serves as a placeholder for factored out locomotion animation when\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, " is enabled."], "extent": [7468, 7669]}], "container": true, "attrs": {"id": "createlocomotionjoint"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Node"], "extent": [964, 981], "body": [{"type": "para", "indent": 4, "text": ["Name of the transform in the hierarchy that controls the locomotion of the character (i.e.  the node that has translation channels that move it forward in space)."], "extent": [1005, 1173]}], "container": true, "attrs": {"id": "locomotionnode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Orient"], "extent": [1173, 1192], "body": [{"type": "para", "indent": 4, "text": ["Optional name of a transform in the hierarchy, which is used to extract an overall rotation using the vector from the ", {"type": "ui", "text": ["Locomotion Node"]}, " to this transform.\n    If this transform is the same as the ", {"type": "ui", "text": ["Locomotion Node"]}, ", its orientation will be directly extracted."], "extent": [1218, 1486]}], "container": true, "attrs": {"id": "locomotionorient"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload"], "extent": [1561, 1569], "body": [{"type": "para", "indent": 4, "text": ["Reloads the clips."], "extent": [1569, 1593]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clips"], "extent": [1593, 1600], "body": [{"type": "para", "indent": 4, "text": ["The number of clips to add."], "extent": [1600, 1633]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Name"], "extent": [1633, 1639], "body": [{"type": "para", "indent": 4, "text": ["The name to identify the clip.\n    All clips in an agent definition must have unique names."], "extent": [1654, 1751]}], "container": true, "attrs": {"id": "name"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Input"], "extent": [1751, 1758], "body": [{"type": "para", "indent": 4, "text": ["The source to use for the clip to add."], "extent": [1775, 1819]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Character Rig"], "extent": [1819, 1838], "body": [{"type": "para", "indent": 8, "text": ["Creates an animation clip from a character subnetwork/asset in the scene."], "extent": [1838, 1920]}], "container": true}, {"type": "dt", "indent": 4, "text": ["FBX"], "extent": [1920, 1929], "body": [{"type": "para", "indent": 8, "text": ["The disk path to an ", {"scheme": null, "value": "/io/fbx", "type": "link", "text": ["FBX file"], "fullpath": "/io/fbx.html"}, ".\n        As with the ", {"scheme": "Node", "value": "/nodes/sop/agent", "type": "link", "text": ["Agent SOP"], "fullpath": "/nodes/sop/agent.html"}, ", a clip is created for each take in the FBX file.\n        The ", {"type": "code", "text": ["${FBX_TAKE_NAME}"]}, " and ", {"type": "code", "text": ["${FBX_TAKE_INDEX}"]}, " local variables can be used with the ", {"type": "ui", "text": ["Name"]}, " parameter to generate clip names based on the take name and index from the FBX file."], "extent": [1929, 2260]}], "container": true}, {"type": "dt", "indent": 4, "text": ["File"], "extent": [2260, 2270], "body": [{"type": "para", "indent": 8, "text": ["The disk path to a ", {"type": "code", "text": [".clip"]}, " or ", {"type": "code", "text": [".bclip"]}, " to use.\n        As with the ", {"scheme": "Node", "value": "/nodes/sop/agent", "type": "link", "text": ["Agent SOP"], "fullpath": "/nodes/sop/agent.html"}, ", the ", {"type": "code", "text": ["${CLIP}"]}, " local variable can be used as a ", {"type": "code", "text": ["*"]}, " placeholder to load a set of files.\n        The name of the clip is inferred by substituting the string matched by ", {"type": "code", "text": ["${CLIP}"]}, " for ", {"type": "code", "text": ["${CLIP}"]}, " in the ", {"type": "ui", "text": ["Name"]}, " parameter."], "extent": [2270, 2589]}], "container": true}, {"type": "dt", "indent": 4, "text": ["CHOP"], "extent": [2589, 2599], "body": [{"type": "para", "indent": 8, "text": ["The path to a CHOP to load the clip data from."], "extent": [2599, 2654]}], "container": true}, {"type": "dt", "indent": 4, "text": ["USD"], "extent": [2654, 2663], "body": [{"type": "para", "indent": 8, "text": ["Creates an animation clip from one or more USD ", {"type": "code", "text": ["Skeleton"]}, " primitives.\n        The source USD stage can be a file on disk or a LOP node.\n        The ", {"type": "code", "text": ["${USD_PRIM_NAME}"]}, " local variable can be used with the ", {"type": "ui", "text": ["Name"]}, " parameter to generate clip names based on the USD primitive\u2019s name.\n        The animation clip\u2019s frame range is determined from the stage\u2019s ", {"type": "code", "text": ["startTimeCode"]}, " and ", {"type": "code", "text": ["endTimeCode"]}, " metadata, which can be modified using the ", {"scheme": "Node", "value": "/nodes/lop/configurelayer", "type": "link", "text": ["Configure Layer LOP"], "fullpath": "/nodes/lop/configurelayer.html"}, "."], "extent": [2663, 3146]}], "container": true}, {"type": "dt", "indent": 4, "text": ["MotionClip"], "extent": [3146, 3162], "body": [{"type": "para", "indent": 8, "text": ["Creates the clip from a ", {"scheme": "Node", "value": "/nodes/sop/kinefx--motionclip", "type": "link", "text": ["MotionClip"], "fullpath": "/nodes/sop/kinefx--motionclip.html"}, ", provided via the second input.\n        The clip\u2019s name, sample rate, and length are determined from the geometry\u2019s ", {"scheme": "Node", "value": "/nodes/sop/kinefx--configureclipinfo", "type": "link", "text": ["clipinfo attribute"], "fullpath": "/nodes/sop/kinefx--configureclipinfo.html"}, ", but the name can be optionally overridden using the ", {"type": "ui", "text": ["Name"]}, " parameter.\n        Multiple clips can be imported by ", {"scheme": "Node", "value": "/nodes/sop/pack", "type": "link", "text": ["packing"], "fullpath": "/nodes/sop/pack.html"}, " each clip and enabling ", {"type": "ui", "text": ["Treat Packed Primitives as Inputs"]}, "."], "extent": [3162, 3609]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "source"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["CHOP"], "extent": [3609, 3615], "body": [{"type": "para", "indent": 4, "text": ["Specifies the CHOP node to load the clip from."], "extent": [3615, 3667]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Source"], "extent": [15689, 15698], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether the source USD stage is from a LOP node or USD file on disk."], "extent": [15718, 15802]}], "container": true, "attrs": {"id": "usdsource"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["LOP Path"], "extent": [15802, 15812], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to a LOP node.\n    The agent definition will be constructed from a UsdSkel character in the USD stage output by this node."], "extent": [15829, 15976]}], "container": true, "attrs": {"id": "loppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD File"], "extent": [15976, 15986], "body": [{"type": "para", "indent": 4, "text": ["The path to a USD file on disk."], "extent": [16003, 16040]}], "container": true, "attrs": {"id": "usdfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Skeleton Primitives"], "extent": [3777, 3798], "body": [{"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["Skeleton"]}, " primitive(s) to import animation from.\n    You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern.html"}, " for advanced matching, including matching all prims in a collection (using ", {"type": "code", "text": ["/path/to/prim.collection:", {"type": "var", "text": ["name"]}]}, ")."], "extent": [3798, 4029]}, {"type": "para", "indent": 4, "text": ["If a ", {"type": "code", "text": ["SkelRoot"]}, " primitive is specified instead, the animation will be imported from its first skeleton binding.\n    If the pattern is empty, the first ", {"type": "code", "text": ["Skeleton"]}, " prim in the stage will be used."], "extent": [4029, 4228]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["File"], "extent": [4228, 4234], "body": [{"type": "para", "indent": 4, "text": ["Specifies the file to load the clip from, when ", {"type": "ui", "text": ["Source"]}, " is ", {"type": "ui", "text": ["File"]}, " or ", {"type": "ui", "text": ["FBX"]}, "."], "extent": [4234, 4321]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep External Reference"], "extent": [4321, 4346], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Source"]}, " refers to a filename on disk, this boolean flag indicates whether the external reference should be maintained when the geometry will be saved.\n    If the reference is maintained, then the original source of the clip needs to be available when the saved geometry is used.\n    Otherwise, a copy of the clip will be inlined when saving out the geometry so that the original clip is no longer needed."], "extent": [4364, 4782]}], "container": true, "attrs": {"id": "keepref"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delay Load"], "extent": [4782, 4794], "body": [{"type": "para", "indent": 4, "text": ["If enabled, clips will only be loaded from disk when their data is needed.\n    This can improve load times and memory usage for large clip catalogs, but errors from loading clips may not be reported immediately."], "extent": [11636, 11853]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Take Name"], "extent": [4842, 4853], "body": [{"type": "para", "indent": 4, "text": ["Specifies which take(s) in the FBX file to import animation from.\n    This supports the standard pattern matching syntax to specify multiple takes.\n    If empty, all takes will be loaded."], "extent": [4853, 5046]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert Units"], "extent": [12487, 12502], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to convert to Houdini units when importing the FBX file."], "extent": [12524, 12604]}], "container": true, "attrs": {"id": "convertunits"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Minimal Nodes"], "extent": [777, 792], "body": [{"type": "para", "indent": 4, "text": ["Only include animation for nodes whose display flags are on.\n    If you turn this off, ", {"type": "em", "text": ["all"]}, " nodes in the hierarchy are included in the clip."], "extent": [814, 961]}], "container": true, "attrs": {"id": "minimalnodes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep Transforms for Deforming Shapes"], "extent": [961, 999], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Minimal Nodes"]}, " is enabled, specifies whether channels for nodes containing deforming geometry are included in the clip."], "extent": [1033, 1166]}], "container": true, "attrs": {"id": "keepdeformingshapexforms"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Sample Rate"], "extent": [13890, 13912], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to use the value of the ", {"type": "ui", "text": ["Sample Rate"]}, " parameter instead of the sample rate stored in the FBX file.\n    This is useful if the application that exported the original FBX file did not set the sample rate correctly."], "extent": [13944, 14181]}], "container": true, "attrs": {"id": "fbxoverridesamplerate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sample Rate"], "extent": [14181, 14194], "body": [{"type": "para", "indent": 4, "text": ["Sample rate to use for the clip when ", {"type": "ui", "text": ["Override Sample Rate"]}, " is enabled."], "extent": [14218, 14297]}], "container": true, "attrs": {"id": "fbxsamplerate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Treat Packed Primitives as Inputs"], "extent": [5271, 5306], "body": [{"type": "para", "indent": 4, "text": ["Creates a clip from the contents of each packed geometry primitive in the second input\u2019s geometry.\n    This can be used to procedurally import several ", {"scheme": "Node", "value": "/nodes/sop/kinefx--motionclip", "type": "link", "text": ["MotionClips"], "fullpath": "/nodes/sop/kinefx--motionclip.html"}, "."], "extent": [5306, 5505]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Character Rig"], "extent": [4429, 4445], "body": [{"type": "para", "indent": 4, "text": ["Path to the object subnetwork containing the character rig."], "extent": [4469, 4534]}], "container": true, "attrs": {"id": "objsubnet"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Traverse Outputs"], "extent": [4534, 4552], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the ", {"type": "ui", "text": ["Character Rig"]}, " path is used to specify which nodes to import by traversing its outputs instead of its children."], "extent": [4577, 4715]}], "container": true, "attrs": {"id": "traverseoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pattern"], "extent": [4715, 4724], "body": [{"type": "para", "indent": 4, "text": ["Pattern used to limit which nodes should be imported. Patterns using usual\n    ", {"scheme": "Cmd", "value": "/commands/opglob", "type": "link", "text": ["opglob"], "fallback_text": "opglob", "fullpath": "/commands/opglob.html"}, " syntax along with\n    ", {"scheme": null, "value": "/ref/panes/bundles", "type": "link", "text": [{"type": "code", "text": ["@", {"type": "var", "text": ["bundle"]}]}, " references"], "fullpath": "/ref/panes/bundles.html"}, " are accepted."], "extent": [4744, 4930]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4930, 4940], "body": [{"type": "para", "indent": 8, "text": ["Relative paths specified here are relative to this node, not to the\n        ", {"type": "ui", "text": ["Character Rig"]}, "."], "extent": [4940, 5044]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "objpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [5044, 5050], "body": [{"type": "para", "indent": 4, "text": ["Optional mask to further restrict which ", {"scheme": null, "value": "/nodes/obj/index", "type": "link", "text": ["object node types"], "fullpath": "/nodes/obj/index.html"}, "  will be imported.\n    Disable the toggles to prevent baking particular types."], "extent": [5067, 5228]}], "container": true, "attrs": {"id": "objtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [5659, 5674], "body": [{"type": "para", "indent": 4, "text": ["The range of frames for the clip (start frame, end frame, and increment), inclusive."], "extent": [5674, 5764]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert to In-Place Animation"], "extent": [1486, 1517], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to convert the animation to an in-place clip in addition to recording the locomotion transform."], "extent": [1543, 1662]}], "container": true, "attrs": {"id": "converttoinplace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Project Positions on Dominant Axis"], "extent": [9151, 9187], "body": [{"type": "para", "indent": 4, "text": ["When creating the animation of the ", {"type": "ui", "text": ["Locomotion Node"]}, ", project the positions along the dominant axis of motion in the XZ plane.\n    If the clip will be used as an in-place clip with the ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver"], "fullpath": "/nodes/dop/crowdsolver.html"}, ", enabling this option can help to maintain hip swaying in the motion."], "extent": [9219, 9517]}], "container": true, "attrs": {"id": "projectondominantaxis"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [5872, 5881], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/chop/agent", "type": "link", "text": "", "fullpath": "/nodes/chop/agent.html"}], "extent": [5881, 5902]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agentedit", "type": "link", "text": "", "fullpath": "/nodes/sop/agentedit.html"}], "extent": [5902, 5925]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agentlayer", "type": "link", "text": "", "fullpath": "/nodes/sop/agentlayer.html"}], "extent": [5925, 5949]}], "container": true}], "text": "Related"}], "title": ["Agent Clip"], "summary": ["Adds new clips to agent primitives."], "included": ["/nodes/chop/common", "/nodes/chop/extractlocomotion", "/nodes/chop/fbx", "/nodes/sop/agent", "/nodes/sop/lopimport"]}