{"type": "root", "attrs": {"type": "node", "context": "sop", "namespace": "kinefx", "internal": "mappoints", "icon": "SOP/kinefx-mappoints", "tags": "soprigging, rigging, retargeting", "since": "18.5", "version": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Map Points"], "extent": [153, 168]}, {"type": "summary", "indent": 0, "text": ["Stores a reference on a point to a point in another geometry."], "extent": [168, 238]}, {"type": "para", "indent": 0, "text": ["This node is used to store a reference to a point in the reference geometry found on the second input to a point on the geometry on the first input."], "extent": [238, 388]}, {"type": "para", "indent": 0, "text": ["This reference can be either an integer or a string that refers to either a point number or an arbitrary attribute on the second input\u2019s geometry."], "extent": [388, 537]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [537, 549], "body": [{"level": 3, "type": "sep", "indent": 0, "text": [" Attribute "], "extent": [549, 568], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Output Attribute Name"], "extent": [568, 600], "body": [{"type": "para", "indent": 8, "text": ["The name of the attribute on the first input in which to store the mapping."], "extent": [628, 713]}], "container": true, "attrs": {"id": "outputattrname"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Reference Type"], "extent": [713, 733], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Point Number"], "extent": [755, 777], "body": [{"type": "para", "indent": 12, "text": ["The attribute stored will be an integer corresponding to a point ", {"type": "em", "text": ["index"]}, " on the second input geometry."], "extent": [777, 893]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Attribute Value"], "extent": [893, 918], "body": [{"type": "para", "indent": 12, "text": ["The attribute stored will be either an integer or a string that matches an attribute value on the second input geometry."], "extent": [918, 1052]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "reftype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Use MotionClip Topology"], "extent": [1052, 1081], "body": [], "container": true, "attrs": {"id": "usemotionclip"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Targets Group"], "extent": [1109, 1128], "body": [{"type": "para", "indent": 8, "text": ["When enabled a point group will be created on the second output geometry of the points that have been mapped to within this node. This is useful if you wish to isolate or otherwise manipulate only these points downstream,"], "extent": [1154, 1385]}], "container": true, "attrs": {"id": "targetsgroup"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Align Guides "], "extent": [1385, 1406], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [1406, 1417], "body": [{"type": "para", "indent": 8, "text": ["Used only to allow you to align the skeletons in the viewport whilst performing the mapping operation, these parameters do not modify the geometry in any way."], "extent": [1417, 1585]}], "container": true}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Rest Pose Attribute"], "extent": [1585, 1610], "body": [{"type": "para", "indent": 8, "text": ["The name of the matrix4 point attribute contained the rest pose for both skeletons. If present, this will be used to display the skeleton in the viewport when performing the mapping."], "extent": [1638, 1830]}], "container": true, "attrs": {"id": "restposeattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Translate"], "extent": [1830, 1845], "body": [{"type": "para", "indent": 8, "text": ["Align the translation of the two skeletons in the viewport."], "extent": [1868, 1937]}], "container": true, "attrs": {"id": "translate"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale to Fit"], "extent": [1937, 1955], "body": [{"type": "para", "indent": 8, "text": ["Scale the second input geometry to match the size of the first input geometry in the viewport."], "extent": [1979, 2084]}], "container": true, "attrs": {"id": "scaletofit"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Target Guide Offset"], "extent": [2084, 2109], "body": [{"type": "para", "indent": 8, "text": ["A translation offset for the second input geometry in the viewport."], "extent": [2140, 2217]}], "container": true, "attrs": {"id": "targetguideoffset"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Import Mappings"], "extent": [2217, 2234], "body": [{"type": "para", "indent": 4, "text": ["Import a ", {"type": "code", "text": [".json"]}, " or ", {"type": "code", "text": [".xml"]}, " file to populate the ", {"type": "ui", "text": ["Mappings"]}, " from."], "extent": [2258, 2330]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": [".json"]}, " file is expected to have the same syntax that the ", {"type": "ui", "text": ["Export Mappings"]}, " option generates.\n    The ", {"type": "code", "text": [".xml"]}, " file is expected to have the following syntax:"], "extent": [2330, 2501]}, {"type": "para", "indent": 4, "text": ["A root element ", {"type": "code", "text": ["config_root"]}, ". A child element called ", {"type": "code", "text": ["match_list"]}, " under which the skeleton data will be stored."], "extent": [2501, 2622]}, {"type": "para", "indent": 4, "text": ["The skeleton data should be in form of one element, called ", {"type": "code", "text": ["item"]}, ", per point. This element must have a ", {"type": "code", "text": ["value"]}, ", which represents the name of the point and a ", {"type": "code", "text": ["key"]}, " attribute, which represents a conceptual argument that will be used to match this item to another item from a different ", {"type": "code", "text": [".xml"]}, " file.\n    Example of point item: ", {"type": "code", "text": ["<item key=\"RightUpLeg\" value=\"thigh_r\"/>"]}, ". "], "extent": [2622, 2995]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [2995, 3005], "body": [{"type": "para", "indent": 8, "text": ["When choosing to import a ", {"type": "code", "text": [".xml"]}, " file, you will be asked to first choose the file for the ", {"type": "ui", "text": ["Target Skeleton"]}, " and then choose another file for the ", {"type": "ui", "text": ["Source Skeleton"]}, ". As mentioned above, the way the matching works for ", {"type": "code", "text": [".xml"]}, " files is by looking up each element in both files, finding the elements that share the same ", {"type": "code", "text": ["key"]}, " and, if the ", {"type": "code", "text": ["value"]}, " of that element is not empty, perform the matching. Naturally, this means that the ", {"type": "code", "text": ["key"]}, " must be unique per file - there can not be 2 items with the same ", {"type": "code", "text": ["key"]}, " or the mapping might produce unexpected results."], "extent": [3005, 3567]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "importmappings"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Export Mappings"], "extent": [3567, 3584], "body": [{"type": "para", "indent": 4, "text": ["Export the current ", {"type": "ui", "text": ["Mappings"]}, " to a ", {"type": "code", "text": [".json"]}, " file."], "extent": [3608, 3664]}, {"type": "para", "indent": 4, "text": ["The exported file will contain a ", {"type": "code", "text": ["mappings"]}, " dictionary that will have a key for each point in the ", {"type": "ui", "text": ["Target Skeleton"]}, ".\n    Each of these keys, in turn, are a dictionary of their own containing two distinct keys:"], "extent": [3664, 3881]}, {"type": "para", "indent": 4, "text": [{"type": "code", "text": ["reference"]}, ": stores the mapping reference as dictated by the ", {"type": "ui", "text": ["Reference Type"]}, " parameter(ptnum when ", {"type": "ui", "text": ["Reference Type"]}, " is set to ", {"type": "ui", "text": ["Point Number"]}, ", value of the ", {"type": "ui", "text": ["Reference Attribute"]}, " parm when ", {"type": "ui", "text": ["Reference Type"]}, " is set to ", {"type": "ui", "text": ["Attribute Value"]}, ")"], "extent": [3881, 4135]}, {"type": "para", "indent": 4, "text": [{"type": "code", "text": ["value"]}, ": stores the mapped point on the ", {"type": "ui", "text": ["Source Skeleton"]}, " in a form dictated by the ", {"type": "code", "text": ["reference"]}, " key(point number or attribute value)"], "extent": [4135, 4275]}], "container": true, "attrs": {"id": "exportmappings"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Auto Map Inline Points"], "extent": [4275, 4299], "body": [{"type": "para", "indent": 4, "text": ["Attempt to find reasonable mappings in between those specified by the user."], "extent": [4322, 4403]}], "container": true, "attrs": {"id": "automappoints"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mappings"], "extent": [4403, 4413], "body": [{"type": "para", "indent": 4, "text": ["A list of point pairs mapping points on the first input geometry to points on the second input geometry."], "extent": [4431, 4542]}], "container": true, "attrs": {"id": "mappings"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [4542, 4550], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Target Skeleton"], "extent": [4550, 4572], "body": [{"type": "para", "indent": 8, "text": ["The geometry onto which we will set the point attribute specified in ", {"type": "ui", "text": ["Output Attribute Name"]}, "."], "extent": [4572, 4677]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Source Skeleton"], "extent": [4677, 4698], "body": [{"type": "para", "indent": 8, "text": ["The geometry that the ", {"type": "ui", "text": ["Target Skeleton"]}, " will be mapped onto."], "extent": [4698, 4779]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [4779, 4788], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["First Output"], "extent": [4788, 4807], "body": [{"type": "para", "indent": 8, "text": ["The geometry on the first input with the mapping stored on the point attribute specified in ", {"type": "ui", "text": ["Output Attribute Name"]}, "."], "extent": [4807, 4935]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Second Output"], "extent": [4935, 4954], "body": [{"type": "para", "indent": 8, "text": ["A unmodified copy of the second input geometry."], "extent": [4954, 5011]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [5011, 5020], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--computerigpose", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--computerigpose.html"}], "extent": [5020, 5056]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rigpose", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rigpose.html"}], "extent": [5056, 5085]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rigmatchpose", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rigmatchpose.html"}], "extent": [5085, 5119]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fullbodyik", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fullbodyik.html"}], "extent": [5119, 5151]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fktransfer", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fktransfer.html"}], "extent": [5151, 5183]}], "container": true}], "text": "Related"}], "title": ["Map Points"], "summary": ["Stores a reference on a point to a point in another geometry."]}