{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "mlexample", "icon": "SOP/mlexample", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["ML Example"], "extent": [78, 93]}, {"type": "summary", "indent": 0, "text": ["Create examples from input components and an optional target components"], "extent": [93, 173]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [173, 188], "body": [{"type": "para", "indent": 0, "text": ["ML Example allows you to combine an input geometry with a desired output called a ", {"type": "ui", "text": ["target"]}, " which results in a labeled example. A data set for ML training can be formed by combining multiple labeled examples."], "extent": [188, 400]}, {"type": "para", "indent": 0, "text": ["Regression is a type of supervised machine learning where a continuous function is learned from a set of labeled examples. Each labeled example consists of two components: an input component and a target component. The ML Example node creates a labeled example from these two components. Given a labeled example, the input component and the target component can be retrieved using ", {"scheme": "Node", "value": "/nodes/sop/mlexampledecompose", "type": "link", "text": ["ML Example Decompose"], "fullpath": "/nodes/sop/mlexampledecompose.html"}, ". ML Example Decompose can be seen as the reverse operation of ML Example."], "extent": [400, 907]}, {"type": "para", "indent": 0, "text": ["For each given input, a corresponding target may be generated by applying a procedural network. This way, a synthetic data set consisting of labeled examples can be formed which can be used for ML training."], "extent": [907, 1115]}, {"type": "para", "indent": 0, "text": ["In addition to labeled examples, ML Example can also create unlabeled examples. This is done by leaving the optional Target Component input unconnected."], "extent": [1115, 1269]}, {"type": "para", "indent": 0, "text": ["Keeping inputs and targets tied together as labeled examples has advantages when preprocessing a data set. If outliers need to be rejected, a labeled example can be discarded without having to deal with indexing mismatches between inputs and targets. Having each input and target component bundled together also facilitates preprocessing steps where the transformation of either the input or the target depends on both the input and the target."], "extent": [1269, 1715]}, {"type": "para", "indent": 0, "text": ["Because each labeled example is stored as a packed primitive, a single geometry may store multiple labeled examples. Sets of labeled examples may be merged together by merging the geometries that contain them in SOPs. A geometry containing labeled examples can be written as a data set for training using ", {"scheme": "Node", "value": "/nodes/sop/mlexampleoutput", "type": "link", "text": ["ML Example Output"], "fullpath": "/nodes/sop/mlexampleoutput.html"}, "."], "extent": [1715, 2067]}, {"type": "para", "indent": 0, "text": ["Instead of creating a single example at a time, you can use ", {"type": "ui", "text": ["ML Example"]}, " to create a set of examples at once. If you have a number of packed input components and the same number of packed target components, ML Example will zip together the inputs and targets to create an example for each corresponding input-target pair. To do this, turn on both ", {"type": "ui", "text": ["Use Packed Input Component"]}, " and ", {"type": "ui", "text": ["Use Packed Target Component"]}, ". However, if either ", {"type": "ui", "text": ["Use Packed Input Component"]}, " and ", {"type": "ui", "text": ["Use Packed Target Component"]}, " is disabled, ", {"type": "ui", "text": ["ML Example"]}, " treats both inputs as a single component and creates only a single example."], "extent": [2067, 2675]}, {"type": "para", "indent": 0, "text": ["The options for using packed components can also be useful when all the input and target contributions (e.g., point attributes and volumes) from which you want to construct an example belong to a single geometry. In that case, that single geometry should be packed using ", {"scheme": "Node", "value": "/nodes/sop/pack", "type": "link", "text": ["Pack SOP"], "fullpath": "/nodes/sop/pack.html"}, " and then connected to both inputs of ML Example. This prevents the single geometry from being duplicated while all downstream ML nodes can work the usual way."], "extent": [2675, 3131]}, {"type": "para", "indent": 0, "text": ["Sometimes, you may want to discard examples that are outliers (e.g., the results of failed simulations). For this purpose, the input component and the target component that go into an ML Example can be marked as invalid using detail attributes that can be specified by ", {"type": "ui", "text": ["Input Validity Attribute"]}, " and ", {"type": "ui", "text": ["Target Validity Attribute"]}, ". For the input comonent, this works only if ", {"type": "ui", "text": ["Use Packed Input Component"]}, " is disabled. The same principle applies for the target component."], "extent": [3131, 3605]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Representation"], "extent": [3605, 3626], "body": [{"type": "para", "indent": 0, "text": ["Example sets are represented as geometry, which may be manipulated in a Geometry network.\nThe example-based ML nodes expect and maintain specific rules for representing examples this way.\nEach example is represented by a packed primitive. A geometry that represents a set of examples must consist only of packed primitives."], "extent": [3626, 3952]}, {"type": "para", "indent": 0, "text": ["The representation of unlabeled and labeled examples is different. An unlabeled example is a packed primitive, whose embedded geometry is the contents of the example (the input component). This allows you to use any set of packed primitives as unlabeled examples with the example-based ML nodeset. "], "extent": [3952, 4252]}, {"type": "para", "indent": 0, "text": ["A labeled example is a packed primitive that contains two packed primitives: the input component and target component. This allows unlabeled examples to be labeled without copying their embedded geometries. Labeled examples must be part of a primitive group called ", {"type": "code", "text": ["labeledexamples"]}, ". Unlabeled examples either don\u2019t have the group ", {"type": "code", "text": ["labeledexamples"]}, " or are not a member of it. "], "extent": [4252, 4630]}, {"type": "para", "indent": 0, "text": ["To summarize:"], "extent": [4630, 4644]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Any geometry representing a set of examples should consist entirely of packed primitives."], "extent": [4644, 4736]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the geometry doesn\u2019t have the ", {"type": "code", "text": ["labeledexamples"]}, " primitive group, each of the packed primitives is treated as an unlabeled example by the ML nodes."], "extent": [4736, 4888]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the geometry has the ", {"type": "code", "text": ["labeledexamples"]}, " primitive group, members of this group are treated as labeled examples and the remaining primitives are treated as unlabeled examples."], "extent": [4888, 5068]}], "container": true}, {"type": "para", "indent": 0, "text": ["When you use the example-based ML nodes, the above representation rules are being applied for you and should not concern you too much."], "extent": [5068, 5204]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [5204, 5216], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Use Packed Input Component"], "extent": [5216, 5245], "body": [{"type": "para", "indent": 4, "text": ["Use the packed input component to construct the example. This can avoid copying the embedded geometry of the packed input component."], "extent": [5278, 5416]}], "container": true, "attrs": {"id": "usepackedinputcomponent"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Packed Target Component"], "extent": [5416, 5445], "body": [{"type": "para", "indent": 4, "text": ["Use the packed target component to construct the example. This can avoid copying the embedded geometry of the packed target component."], "extent": [5479, 5619]}], "container": true, "attrs": {"id": "usepackedtargetcomponent"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Input Validity Attribute"], "extent": [5619, 5645], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute that indicates whether the first input (Input) is valid. This is a primitive attribute if the input is packed and a detail attribute if the input is unpacked. If this attribute exists and has value 0, then the result is an empty geometry, representating an invalid labeled example. This option is a convenient way for discarding invalid labeled examples when building a set."], "extent": [5677, 6082]}], "container": true, "attrs": {"id": "inputvalidityattribute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Target Validity Attribute"], "extent": [6082, 6109], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute that indicates whether the second input target (Target) is valid. This is a primitive attribute if the input is packed and a detail attribute if the input is unpacked. If this attribute exists and has value 0, then the result is an empty geometry, representating an invalid labeled example."], "extent": [6142, 6463]}], "container": true, "attrs": {"id": "targetvalidityattribute"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [6463, 6471], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Input Component"], "extent": [6471, 6489], "body": [{"type": "para", "indent": 4, "text": ["An input component of each example."], "extent": [6489, 6534]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Target Component"], "extent": [6534, 6552], "body": [{"type": "para", "indent": 4, "text": ["A target component of each example."], "extent": [6552, 6593]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [6593, 6602], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Example"], "extent": [6602, 6612], "body": [{"type": "para", "indent": 4, "text": ["The packed-primitive representation of each example."], "extent": [6612, 6674]}], "container": true}], "container": true}], "text": "Outputs"}], "title": ["ML Example"], "summary": ["Create examples from input components and an optional target components"]}